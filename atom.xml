<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WanLi&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/a560576344d33015bbc0603eeb844702</icon>
  <subtitle>Stay hungry,Stay foolish...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.beenli.cn/"/>
  <updated>2020-10-06T01:20:58.342Z</updated>
  <id>https://www.beenli.cn/</id>
  
  <author>
    <name>Wan Li</name>
    <email>wanli.99@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>From 1000Hz clock to 1Hz--OneHertz</title>
    <link href="https://www.beenli.cn/posts/8cdff568/"/>
    <id>https://www.beenli.cn/posts/8cdff568/</id>
    <published>2020-10-03T06:47:49.000Z</published>
    <updated>2020-10-06T01:20:58.342Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>problem link：<a href="https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7b" rel="external nofollow noreferrer">https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7b</a></p></blockquote><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><blockquote><p>从频率为1000Hz的时钟中得到频率为1Hz的信号(<code>OneHertz</code>)，它用来驱动一系列时/分/秒计数器的使能信号(Enable signal)以此创建一个数字时钟墙(digital wall clock)。因为需要时钟每秒计数一次，OneHertz信号必须每秒准确地断言一个周期(周期为1秒，且每周期只能翻转一次)。</p></blockquote><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote><p>用BCD计数器和少许其它的门构建<code>分频器</code>(frequency divider)。并且输出你所使用的BCD计数器的使能信号。(c_enable[0] for the fastest counter, c_enable[2] for the slowest)</p><p>如下的BCD计数器已经提供给你，<code>Enable</code>为高电平计数器才能正常工作，<code>Reset</code>为同步高电平置位0；<br></p><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> bcdcount (<span class="hljs-keyword">input</span> clk,<span class="hljs-keyword">input</span> reset,<span class="hljs-keyword">input</span> enable,<span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] Q);</code></pre><br>你设计的电路中所有的计数器必须直接使用相同的1000Hz时钟信号。<p></p></blockquote><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (    <span class="hljs-keyword">input</span> clk,    <span class="hljs-keyword">input</span> reset,    <span class="hljs-keyword">output</span> OneHertz,    <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] c_enable);</code></pre><h2 id="First-Try"><a href="#First-Try" class="headerlink" title="First Try"></a>First Try</h2><h3 id="answer"><a href="#answer" class="headerlink" title="answer"></a>answer</h3><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (    <span class="hljs-keyword">input</span> clk,    <span class="hljs-keyword">input</span> reset,    <span class="hljs-keyword">output</span> OneHertz,    <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] c_enable);     <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] Q0,Q1,Q2;    <span class="hljs-comment">/************ BCD十进制,当Q=1001时使能--&gt;十倍频 ***************/</span>    <span class="hljs-keyword">assign</span> c_enable[<span class="hljs-number">0</span>] = <span class="hljs-number">1'b1</span>;<span class="hljs-comment">// 让第一个计数器全速计数</span>    <span class="hljs-keyword">assign</span> c_enable[<span class="hljs-number">1</span>] = Q0[<span class="hljs-number">3</span>] &amp; Q0[<span class="hljs-number">0</span>];<span class="hljs-comment">// 第二计数器计数周期是第一个的10倍</span>    <span class="hljs-keyword">assign</span> c_enable[<span class="hljs-number">2</span>] = Q1[<span class="hljs-number">3</span>] &amp; Q1[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 第二计数器计数周期是第二个的10倍</span>    <span class="hljs-keyword">assign</span> OneHertz = Q2[<span class="hljs-number">3</span>] &amp; Q2[<span class="hljs-number">0</span>];    bcdcount counter0 (clk, reset, c_enable[<span class="hljs-number">0</span>], Q0);     bcdcount counter1 (clk, reset, c_enable[<span class="hljs-number">1</span>], Q1);    bcdcount counter2 (clk, reset, c_enable[<span class="hljs-number">2</span>], Q2);<span class="hljs-keyword">endmodule</span></code></pre><h3 id="result❌"><a href="#result❌" class="headerlink" title="result❌"></a>result❌</h3><p><img src="https://image.beenli.cn/img/20201003/WrnmNC6Ae30I.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><center>在计数0-10的时候是正确的</center><p><img src="https://image.beenli.cn/img/20201003/BBvSVnJpwakc.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li><p>在计数90-99的时候: c_enable[2]本该为0却变为了1，导致输出c_enable=5=3’b101;</p></li><li><p>由于c_enable[2]=Q1[3] &amp; Q1[0]，起初我认为是Q1有问题；后续画出如下草图发现还是c_enable有问题</p><p><img src="https://image.beenli.cn/img/20201003/Fzbw4O8G94sC.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p></li></ul><ul><li>由于Q1是由计数器生成的，只要使能信号没问题，那么它就还🆗</li><li>又由于使能信号1和2是我们定义，所以从这里下手解决问题比较方便；</li><li>由上图知使能信号2有问题，它在计数90-99期间一直为高电平，我们只希望其在99时为高电平。</li><li>所有修改使能2的赋值：c_enable[2] = Q1[3] &amp; Q1[0] <code>&amp; c_enable[1]</code></li><li>同理我们也要修改OneHertz = Q2[3] &amp; Q2[0] &amp; <code>c_enable[2]</code>;，让其只在999时才有效；否则其在900-999一直有效；</li></ul><h2 id="Final-answer"><a href="#Final-answer" class="headerlink" title="Final answer"></a>Final answer</h2><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module (    <span class="hljs-keyword">input</span> clk,    <span class="hljs-keyword">input</span> reset,    <span class="hljs-keyword">output</span> OneHertz,    <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] c_enable); <span class="hljs-comment">//</span>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] Q0,Q1,Q2;    <span class="hljs-keyword">assign</span> c_enable[<span class="hljs-number">0</span>] = <span class="hljs-number">1'b1</span>;    <span class="hljs-keyword">assign</span> c_enable[<span class="hljs-number">1</span>] = Q0[<span class="hljs-number">3</span>] &amp; Q0[<span class="hljs-number">0</span>];    <span class="hljs-keyword">assign</span> c_enable[<span class="hljs-number">2</span>] = Q1[<span class="hljs-number">3</span>] &amp; Q1[<span class="hljs-number">0</span>] &amp; c_enable[<span class="hljs-number">1</span>];     <span class="hljs-keyword">assign</span> OneHertz = Q2[<span class="hljs-number">3</span>] &amp; Q2[<span class="hljs-number">0</span>] &amp; c_enable[<span class="hljs-number">2</span>];    bcdcount counter0 (clk, reset, c_enable[<span class="hljs-number">0</span>], Q0);     bcdcount counter1 (clk, reset, c_enable[<span class="hljs-number">1</span>], Q1);    bcdcount counter2 (clk, reset, c_enable[<span class="hljs-number">2</span>], Q2);<span class="hljs-keyword">endmodule</span></code></pre><h2 id="Advanced-problem-❓"><a href="#Advanced-problem-❓" class="headerlink" title="Advanced problem(❓)"></a>Advanced problem(❓)</h2><p>⭐如何实现<code>50%</code>(xx%)占空比的10(xx)倍频电路</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;problem link：&lt;a href=&quot;https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7b&quot; rel=&quot;external nofollow noreferrer&quot;&gt;https://hdlbits
      
    
    </summary>
    
    
      <category term="Digital IC" scheme="https://www.beenli.cn/categories/Digital-IC/"/>
    
      <category term="HDL Bits" scheme="https://www.beenli.cn/categories/Digital-IC/HDL-Bits/"/>
    
    
      <category term="circuits" scheme="https://www.beenli.cn/tags/circuits/"/>
    
  </entry>
  
  <entry>
    <title>Unprivileged Spec(1)--RV32I</title>
    <link href="https://www.beenli.cn/posts/6c2bdcd1/"/>
    <id>https://www.beenli.cn/posts/6c2bdcd1/</id>
    <published>2020-09-30T01:01:08.000Z</published>
    <updated>2020-09-30T12:18:10.086Z</updated>
    
    <content type="html"><![CDATA[<center>RV32I Base Integer Instruction Set</center><h1 id="1-Preface"><a href="#1-Preface" class="headerlink" title="1 Preface"></a>1 Preface</h1><blockquote><ul><li>RV32I是为了足够成为编译器目标并能支持现代操作系统环境而设计的一个基本整数指令集。它也为了减少硬件实现的最小需求而设计。RV32I包含40个独立的指令，尽管一些简单的实现可能用单一的系统硬件指令（a single <a href="#system">SYSTEM hardware instruction</a>)代替ECALL/EBREAK指令，它总是捕获异常(always traps)并且可能将FENCE指令实现为NOP，以减少指令数到38个。RV32I能够模拟几乎任何的ISA扩展（除了A扩展，它需要额外硬件支持原子操作(atomicity）</li></ul><ul><li>在实践中，包含机器模式特权架构的硬件实现将需要9个CSR指令。</li></ul><ul><li>基本整数指令集的子集也许对于教学目的很有用(pedagogical purposes), 但是基础已经被定义，对实现其子集的真正的硬件除了忽略非对齐内存访问并把所有的SYSTEM instruction视为单一的异常(single trap)，我们不应该有什么其它的动机。</li></ul><hr><p>关于RV32I的大多注释也适用于RV64I base。</p></blockquote><h1 id="2-Programmer’s-Model"><a href="#2-Programmer’s-Model" class="headerlink" title="2 Programmer’s Model"></a>2 Programmer’s Model</h1><blockquote><p>对于RV32I非特权状态一共有32个寄存器(都是32位宽，i.e. ,XLEN=32)：<code>x0~x31</code>;x0被硬编码到0。另外31个寄存器保存的值可以被解释为：Ⅰ、布尔值的集合，Ⅱ、补码的有符号二进制整数，Ⅲ、无符号二进制整数</p><p>有一个额外的非特权寄存器，<code>pc</code>(program counter)：保存当前指令的地址</p></blockquote><ul><li>在Base Integer ISA中，没有指定的栈指针或者子例程返回地址链接寄存器(link register)；指令编码允许任何寄存器被用于这个目的；但是，标准软件调用惯例(calling convention)使用寄存器<code>x1</code>保存调用的返回地址，<code>x5</code>作为备用链接寄存器。标准调用例程使用<code>x2</code>作为栈指针(stack pointer)</li><li>硬件可以使用<code>x1</code>或<code>x2</code>来加速函数调用和返回(因为可以尽早解码)；<a href="#jal">详情见<code>JAL</code>和<code>JALR</code>指令</a></li><li>可选的压缩16-bit指令格式基于这样的假设设计的：<code>x1</code>：返回地址寄存器；<code>x2</code>:栈指针。使用其他约定的软件将正常运行，但可能有较大的代码大小。</li></ul><hr><p><strong><font color="red">notes：</font></strong></p><ul><li>可用架构寄存器(available architectural registers)的数量能够对<code>代码大小</code>，<code>性能</code>，<code>能耗</code>产生重大影响。尽管16个寄存器对于运行编译代码的整数ISA来说是足够的，但是在长度为16位使用3-address格式的指令中编码拥有16个寄存器完整的ISA是不可能的。(⭐PS:16个寄存器，address至少4位，三地址就12位，那么只剩下4位区分不同的指令了,即最多16条不同的指令)。</li><li>尽管2-address是可能的。但它增加指令条数并且降低效率。我们想要避免立即数指令的大小来简化硬件实现，一旦32-bit的指令大小被采用，支持32个整数寄存器就很显而易见了。一个更大数量的整数寄存器也有助于提高高性能代码的性能，可广泛使用<code>循环展开</code>（loop unrolling)、<code>软件流水线</code>(software pipelining)和<code>缓存平铺</code>(cache tiling)。❓</li><li>基于上面这些原因，我们为基础ISA选择了一个常规大小（conventional size)——32个整数寄存器。动态寄存器使用趋向于被一些经常访问的寄存器主宰，并且<code>regfile</code>(寄存器堆)的实现可被优化以减少频繁访问寄存器的访问能量(access energy)。</li><li>可选的16位压缩指令格式绝大部分只使用8个寄存器，因此能提供稠密的指令编码(dense instruction encoding),但是如果想要的话，额外的指令集扩展能支持更大的寄存器空间(要么扁平的要么分层次的)。</li></ul><h1 id="3-Base-Instruction-Formats"><a href="#3-Base-Instruction-Formats" class="headerlink" title="3 Base Instruction Formats"></a>3 Base Instruction Formats</h1><blockquote><p>有4种核心的指令格式：R/I/S/U。指令长度都是32位，并且必须在内存中以4字节为边界对齐。指令地址非对齐的异常，常常是由于分支的发生(taken branch)或者非条件跳转的目标地址不是4字节对齐。</p></blockquote><ul><li><p>对于解码一个保留指令的行为是没有规定的(unspecified)</p></li><li><p>RISC-V ISA保持源寄存器(<code>rs1</code>和<code>rs2</code>)和目标寄存器(<code>rd</code>)的位置在所有指令格式中相同以简化解码。除了使用在CSR指令中的5bit的立即数，立即数总是<code>sign-extended</code>，通常是打包到指令中最左边的可用位，这样分配以减少硬件的复杂程度。特别是，对于所有立即数的符号位总是在最高位(也就是Ins[31])来加速符号扩展电路。</p><p><img src="https://image.beenli.cn/img/20200930/F4vpswvD8a17.jpg?imageslim" srcset="/img/loading.gif" alt="mark"><br><strong><i></i></strong></p><center><strong><i>imm[x]指的是当前位在扩展成32位立即数中的位置</i></strong></center><p></p><ul><li>实际应用中，大部分立即数要么很小，要么需要所有的位数(XLEN bits)。我们选择非对称立即数分割：常规指令中立即数占12bits;特殊的 load-upper-immediate 指令中立即数占20bits。这样做是为了给常规指令更多的opcode空间。</li></ul></li></ul><h1 id="4-Immediate-Encoding"><a href="#4-Immediate-Encoding" class="headerlink" title="4 Immediate Encoding"></a>4 Immediate Encoding</h1><blockquote><p>指令格式还有两个变种(variants)：B/J，它们基于立即数的处理衍生出来。</p></blockquote><p><img src="https://image.beenli.cn/img/20200930/NR78wxr6Nbb8.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li>S和B仅有的区别：在B格式中12bit立即数域乘以2用于编码分支偏移。而不是像传统做法那样，将指令编码中的所有立即数位用硬件左移一位,中间的位数(imm[10:1])和符号位保留在固定位置，而S格式中的最低位(inst[7])在B格式中编码一个高阶位。</li><li>U和J的仅有区别：U要向左移12位；而J只用移动1位。在U和J指令立即数中指令的位置尽量跟其他格式的指令或者它们互相重叠。</li></ul><p><img src="https://image.beenli.cn/img/20200930/CoSeYfK4wdG4.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><h1 id="5-Computational"><a href="#5-Computational" class="headerlink" title="5 Computational "></a>5 <a name="compute">Computational</a></h1><blockquote><p>大多数的<code>整数算术指令</code>(Integer computational instruction)对保存在整数寄存器中的<code>XLEN</code>位的值进行操作。整数计算指令要么被编码为使用I格式的寄存器-立即数操作；要么使用R格式的寄存器-寄存器操作。对于这两种类型指令的目的寄存器都是<code>rd</code>。没有整型计算指令会导致算术异常</p></blockquote><ul><li><p>基本指令集不包括对整数算术运算上做<code>溢出检查</code>(overflow checks)支持的特殊指令集。因为许多溢出检查能够更便宜地(cheaply)使用RISC-V分支来实现</p></li><li><p>对<code>无符号加法</code>的溢出检查仅仅需要在加法指令后加上一条额外的分支指令</p><pre><code class="hljs assembly">add t0,t1,t2blut t0, t1, overflow</code></pre></li><li><p>对于有符号加法：如果一个操作数的符号已知，溢出检查仅需要加法之后的一个分支（覆盖了带有立即数操作数的常见加法情形）</p><pre><code class="hljs assembly">addi t0, t1, +immblt t0, t1, overflow</code></pre></li><li><p>对于常规的<code>有符号加法</code>，加法之后需要三条额外的指令。利用当且仅当另一个操作数为负时，该和应小于其中一个操作数的观察。</p><pre><code class="hljs assembly">add t0, t1, t2slti t3, t2, 0slt t4, t0, t1bne t3, t4, overflow</code></pre></li><li><p>在RV64I中，32位有符号的加法溢出可以通过比较ADD和ADDW操作的结果来进一步优化。(ADDW肯定不会溢出)</p></li></ul><h2 id="Register-Immediate"><a href="#Register-Immediate" class="headerlink" title="Register-Immediate"></a><a name="arith">Register-Immediate</a></h2><p><img src="https://image.beenli.cn/img/20200930/9lWr2QpMilov.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ol><li><p><code>ADDI</code>：将12位立即数符号扩展后与<code>rs1</code>中的值相加，算术溢出忽略，结果的低32位存到<code>rd</code>寄存器中。</p><pre><code class="hljs assembly">/* 两条指令等效 */ADDI rd, rs1, 0MV rd , rs1(汇编伪指令：将rs1中的值复制给rd)</code></pre></li><li><p><code>SLTI</code>(set less than immediate): 当寄存器<code>rs1</code>中的值小于立即数（俩者都视为有符号数)，将寄存器<code>rd</code>置为1；否则置0。<code>SLTIU</code>: 功能一样，但是把比较的对象视为无符号数。</p><pre><code class="hljs assembly">/* 两条指令等效 */SLTIU rd, rs1, 1(当rs1等于0,rd为1,否则为0)SEQZ rd, rs</code></pre></li><li><p><code>ANDI, ORI, XORI</code>: 三个逻辑运算符，分别对rs1和立即数执行<code>按位</code>(bitwise)的与，或，异或运算。</p><pre><code class="hljs assembly">/* 两条指令等效 */XORI rd, rs1, -1(-1的补码为全1)NOT rd, rs(将rs各位取反赋值给rd)</code></pre><hr><p><img src="https://image.beenli.cn/img/20200930/ohbIXFmmows6.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p></li></ol><blockquote><p><code>移位</code>被编码一种特殊的I类型指令格式。</p><ul><li>被移位的操作数为<code>rs1</code>；移位的位数被编码在立即数域的低五位上。</li><li>👉移类型被编码在第30位上；</li><li><code>SLLI</code>(shift left logical)：0被移动到低位</li><li><code>SRLI</code>: 0被移动到高位</li><li><code>SRAI</code>: (shift right arithmetic): 原符号位复制到空出的高位</li></ul></blockquote><hr><p><img src="https://image.beenli.cn/img/20200930/HH9oFeg4OyQC.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ol><li><code>LUI</code>(load upper immediate): 用于构建32位常数并使用U格式指令。把U-immediate的值放在目的寄存器的高20位，其它低位用0填充。</li><li><code>AUIPC</code>(add upper immediate to pc)：用于构建与pc相关的地址，并使用U格式指令。形成32位的偏移(高20位来自立即数，低12位用0填充)，把这个偏移加到AUIPC指令的地址上，然后把结果放到<code>rd</code>中。（rd = pc-4+im)<ul><li>AUIPC指令支持<code>双指令序列</code>(two-instruction sequences)访问相对PC的任意偏移(for both control-flow transfers and data accesses)</li><li>一个AUIPC和JALR中12位偏移的组合能够转换控制给任意32位的PC相对地址(PC-relative address)，而一个ALIPC加上一个常规load和store指令中的12位立即数偏移能供访问任意32位PC相对地址的数据地址(PC-relative data address)</li><li>当前PC值可以通过设置立即数为0获得，尽管JAL+4指令也能获得本地PC(JAL下一指令)，它可能在简单微架构中造成流水线崩溃，或者在更复杂的微架构中污染BTB(❓)</li></ul></li></ol><h2 id="Register-Register"><a href="#Register-Register" class="headerlink" title="Register-Register"></a>Register-Register</h2><blockquote><p>RV32I定义了几个R型算术运算。所有的运算都读取<code>rs1</code>,<code>rs2</code>寄存器的值作为源操作数，把结果写回<code>rd</code>寄存器。<code>funct7</code>和<code>funct3</code>域选择合适的运算。</p></blockquote><p><img src="https://image.beenli.cn/img/20200930/cdJ8aBabLVTk.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><p><a href="#arith">意义同👆。</a></p><h2 id="NOP-Instruction"><a href="#NOP-Instruction" class="headerlink" title="NOP Instruction"></a>NOP Instruction</h2><p><img src="https://image.beenli.cn/img/20200930/QOhQFMEFTYs1.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li>NOP指令：不会改变任何架构上可见的状态。出来推进PC，增加任何适用的性能计数器。NOP被编码为`ADDI x0, x0, 0</li><li>NOPs可以被用来对齐代码段与重要的微架构地址边界。或者为内联代码修改(inline code modification)流出空间。尽管有许多可能的方法去编码NOP,我们使用了规范的NOP编码来允许微架构优化以及更易读的反汇编输出。其它的NOP编码可以用作指示指令(HINT instruction)</li><li>选择ADDI作为NOP编码是因为它在跨一系列系统执行时最可能占用最少的资源;除此之外，该指令仅读取一个寄存器。并且，一个ADDI功能单元在超标量设计中更容易可用，因为adds是最常见的运算</li><li>地址生成单元可以使用相同的硬件够执行ADDI，该硬件被用于base+offset地址计算，而register-register ADD，逻辑运算或移位运算操作需要额外的硬件。</li></ul><h1 id="6-Control-Transfer"><a href="#6-Control-Transfer" class="headerlink" title="6 Control Transfer"></a>6 Control Transfer</h1><blockquote><p>RV32I提供两种控制转义指令：<code>无条件跳转</code>，<code>条件分支</code></p><p>RV32I控制转义指令没有架构上可见的<code>延迟槽</code>(delay slot)</p></blockquote><h2 id="Unconditional-Jumps"><a href="#Unconditional-Jumps" class="headerlink" title="Unconditional Jumps"></a>Unconditional Jumps</h2><p><img src="https://image.beenli.cn/img/20200930/qCmY8sLbKGDK.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><p><code>JAL</code>(jump and link)指令使用<code>J-type</code>格式，J-immediate以两字节的倍数编码一个有符号偏移。(in multiple of 2 bytes；则该偏移要乘以2)。偏移符号扩展，然后加上当前指令的地址形成<code>跳转目标地址</code>(jump target address)。Jumps因此能够访问±1 MiB范围。JAL存储下一条指令的地址(pc+4)到<code>rd</code>；</p><p>标准软件调用约定使用x1作为返回地址寄存器，x5作为备用链接寄存器。</p><p><img src="https://image.beenli.cn/img/20200930/VUjOV9BMhinO.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><p><code>JALR</code>(jump and link register)：间接跳转指令：使用<code>I-type</code>，目标地址通过把符号扩展的12比特立即数加到rs1上，然后置结果的最低位为0获得；下一条指令的地址(pc+4)写到寄存器rd。如果结果不需要，可以把<code>x0</code>当作目的寄存器。</p><p>如果目标地址没有对齐四字节边界，jar和jarl指令将产生<code>指令地址非对齐</code>异常。</p><p>返回地址<code>预测栈</code>(prediction stack)是高性能取值单元的一个常见特点，要求准确检测用于过程调用和返回的指令是有效的。</p><ul><li>对于RISC-V,关于指令使用的线索通过寄存器号的使用被简单的编码。</li><li>JAL指令应该把返回地址压进返回地址栈(RAS)中，当且仅当<code>rd = x1/x5</code>；</li><li>JALR指令应该push/pop a RAS</li></ul><p><img src="https://image.beenli.cn/img/20200930/WC8l9YmmyroI.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><center>link is true when the register is either x1 or x5</center><h2 id="Conditional-Branches"><a href="#Conditional-Branches" class="headerlink" title="Conditional Branches"></a>Conditional Branches</h2><blockquote><p>所有分支指令使用<code>B-type</code>格式。</p><p>12比特的立即数用2字节的倍数编码有符号偏移</p><p>立即数符号扩展后与当前指令地址相加，可以访问的地址范围：<code>±4 KiB</code></p></blockquote><p><img src="https://image.beenli.cn/img/20200930/PR0CJpoojIFU.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><p><code>BEQ</code>:branch equal;&nbsp;&nbsp;<code>BNE</code>: branch not equal;&nbsp;&nbsp;<code>BLT</code>: branch less than;&nbsp;&nbsp;<code>BGE</code>: branch greater than;</p><ul><li>应该对软件进行优化，使顺序代码路径成为最常见的路径，并将较不经常使用的分支代码路径置于行外。软件还应该假设，至少在第一次遇到分支时，预测向后跳转的分支发生，向前跳转的分支不发生。动态预测器应该快速学习任何可预测的分支行为。</li><li>不像一些其它的架构，RISC-V中对于<code>非条件分支</code>应该总是使用<code>jump</code>(JAL with rd=x0)指令而不是条件总是满足的有条件分支指令</li><li>RISC-V跳转也是与pc相关的，并且比分支支持更大的偏置范围，而且不会污染条件分支预测表。</li></ul><h1 id="7-Load-and-Store-😳"><a href="#7-Load-and-Store-😳" class="headerlink" title="7 Load and Store(😳)"></a>7 Load and Store(😳)</h1><blockquote><p>RV32I是一个装载和存储架构：只有<code>load</code>和<code>store</code>指令能够访问内存，算术指令只能操作CPU寄存器。</p></blockquote><ul><li>RV32I提供了32-bit的地址空间，用字节编码。</li><li><code>EEI</code>定义了地址空间的那部分可以被哪些指令合法访问。(e.g.，一些地址可能只能被读，或仅支持按字访问)</li><li>目的寄存器为<code>x0</code>的装载指令将抛出异常，即使装载的值被丢弃也会造成其它的副作用。</li></ul><blockquote><p>In RISC-V，endianness is byte-address invariant</p></blockquote><ul><li><p>如果一个字节以某种顺序(at some endianness)存储到内存某个地址处，那么以字节大小从那个地址以任意的顺序(in any endianness)装载的结果是存储的值。</p></li><li><p>小端(little-endian): 多字节存储时把寄存器最低为字节写到内存字节地址的最低为，随后寄存器的其它字节以权重升序写入。（权重越大的字节占据的内存地址越大）</p></li></ul><hr><p><img src="https://image.beenli.cn/img/20200930/gJvyXMYKv7Ov.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><blockquote><p>装载和存储指令用于在寄存器和内存中转换数据。</p><p>Loads: <code>I-type</code></p><p>Stores: <code>S-type</code></p><p>有效地址：立即数符号扩展加上基址寄存器<code>rs1</code></p><p>目的地址：Ⅰ、for load:从内存取值到<code>rd</code>;Ⅱ、for store：复制<code>rs2</code>的值到内存</p></blockquote><h1 id="8-Memory-Ordering"><a href="#8-Memory-Ordering" class="headerlink" title="8 Memory Ordering"></a>8 Memory Ordering</h1><p><img src="https://image.beenli.cn/img/20200930/8gVkNfBMa1IW.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li><p><code>FENCE</code>：用于排序被其它RISC-V线程，外部设备或者协处理器可见的设备I/O和存储器访问。</p></li><li><p>任何设备输入(I)，设备输出(O)，存储器读取(R),存储器写(W)的组合能够被排序成任何相同的组合。</p></li><li>通俗地说，没有其它线程或者外部设备能够在<code>fence</code>之前的指令集进行任何操作之前，观测到在<code>fence</code>后者的指令集合所做的任何操作。就像一个屏障一样，前面的操作只有先完成，后面的指令结果才能被其它处理器观察到。</li><li>memory-mapped I/O设备很典型地被没有cache的loads和store访问，它们使用I和O而不是R和W。</li><li>指令集扩展也可以描述新的I/O指令，使用fence指令中I和O位进行排序</li></ul><p><img src="https://image.beenli.cn/img/20200930/6dnc1SCYbwDA.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li>fence mode域在ins[31:28]；当fm=0000时排序所有的内存操作。</li><li>可选的<code>FENCE.TSO</code>指令其fm=1000；predecessor=RW,并且successor=RW。TSO命令它的前面集合中的所有加载操作先于它的后继集合中的所有内存操作；它的前面集合中的所有存储操作(store operation)都要先于它的后继集合中的所有存储操作</li></ul><h1 id="9-Call-and-Breakpoints"><a href="#9-Call-and-Breakpoints" class="headerlink" title="9 Call and Breakpoints"></a>9 Call and Breakpoints</h1><blockquote><p><a name="system">SYSTEM instruction</a>：被用于访问需要特权访问的系统功能，使用<code>I-type</code>。</p><p>分为两大类：</p><ul><li>自动读-修改-写(read-modify-write)<code>控制状态寄存器</code>(CSRs)。</li><li>潜在的特权指令(potentially privileged instructions)</li></ul><p>系统指令被定义成运行稍简单的实现总是捕获异常给单一的<code>软件异常处理器</code>(software trap handle)；更加复杂的实现可能需要执行更多条系统指令</p></blockquote><p><img src="https://image.beenli.cn/img/20200930/Wf33chpE3JIQ.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>这两个指令会向<code>配套执行环境</code>(supporting execution environment)引起一个精确的<code>请求异常</code>(requested trap)。</p><h2 id="ECALL"><a href="#ECALL" class="headerlink" title="ECALL"></a>ECALL</h2><blockquote><p><code>ECALL</code>：向运行环境提出服务请求(service request)</p><p>EEl将定义服务请求的参数如何传递，但通常这些都是在整数寄存器中指定的位置</p></blockquote><h2 id="EBREAK"><a href="#EBREAK" class="headerlink" title="EBREAK"></a>EBREAK</h2><blockquote><p><code>EBREAK</code>：返回控制权给调试器环境(debugging environment)</p></blockquote><h1 id="10-Hint"><a href="#10-Hint" class="headerlink" title="10 Hint"></a>10 Hint</h1><blockquote><p>RV32I为<code>HINT</code>指令保留了大的编码空间，通常是用来和微架构沟通性能提示。HINTs被编码为<a href="#compute">整数计算指令</a>,其中<code>rd=x0</code>。因此，像nop指令一样，HINTs不会改变架构可见的状态，除了增加pc和任何适用的性能计数器。</p></blockquote><p><img src="https://image.beenli.cn/img/20200930/nVtEvPja9AXi.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;RV32I Base Integer Instruction Set&lt;/center&gt;&lt;h1 id=&quot;1-Preface&quot;&gt;&lt;a href=&quot;#1-Preface&quot; class=&quot;headerlink&quot; title=&quot;1 Preface&quot;&gt;&lt;/a&gt;1 Prefac
      
    
    </summary>
    
    
      <category term="RISC-V" scheme="https://www.beenli.cn/categories/RISC-V/"/>
    
      <category term="spec" scheme="https://www.beenli.cn/categories/RISC-V/spec/"/>
    
    
  </entry>
  
  <entry>
    <title>IEEE Standard(1)--Conventions</title>
    <link href="https://www.beenli.cn/posts/7b1b9603/"/>
    <id>https://www.beenli.cn/posts/7b1b9603/</id>
    <published>2020-09-28T09:44:18.000Z</published>
    <updated>2020-09-30T12:01:11.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、Overview"><a href="#1、Overview" class="headerlink" title="1、Overview"></a>1、Overview</h1><h2 id="1-1-Convention"><a href="#1-1-Convention" class="headerlink" title="1.1 Convention"></a>1.1 Convention</h2><p><code>shall</code>: 用于法定的要求（mandatory requirement）</p><p><code>may</code>: 用于可选的特性（optional feature）</p><h2 id="1-2-Syntactic-description"><a href="#1-2-Syntactic-description" class="headerlink" title="1.2 Syntactic description"></a>1.2 Syntactic description</h2><blockquote><p><a href="https://www.jianshu.com/p/15efcb0c06c8" rel="external nofollow noreferrer">BNF描述方法</a>(Backus-Naur Form)：</p><p>基本结构为：<non-terminal>::=<replacement></replacement></non-terminal></p><ul><li><code>::=</code>：被定义为的意思</li><li><code>“ ”</code>: 双引号表示字符串，也就是终结符，不能再被定义。</li><li>在双引号外的字代表着语法部分；<code>基本类型 ::= 字符串 | 数字 | 布尔</code>,其中字符串、数字、布尔具体是什么，由下面的规则定义（递归）</li><li><code>&lt;&gt;</code>：尖括号里的内容表示必选内容；</li><li><code>[...]</code>: 表示可选。</li><li><code>{...}</code>:表示重复；实例：<code>AB ::= "a" {"b"}</code>表示：AB由一个a加上任意数量（包括0个）个b组成</li><li><code>(...)</code>: 表示分组，用来控制优先级；<code>AX ::= "a" ("m"|"n")</code>表示：AX由一个a加上m或者n组成</li><li><code>(*...*)</code> : 注释，说明性文本，不表示任何语法。</li></ul></blockquote><ol><li><p>小写单词，一些包含下划线的：语法目录（syntactic categories）</p><p>​ <code>module_declaration</code></p></li><li><p>粗体：保留字、操作符、标点符号</p><p>​ <code>module</code> <code>=&gt;</code> <code>;</code></p></li><li><p>竖条|分割可选单元。如果它以粗体形式出现，它才表示自己。</p><p>​ unary_operator ::= + | - | ! | ~ | &amp; | ~&amp; | <strong>|</strong>(或) | ~|(或非) | ^ | ~^ | ^~（都表示同或)</p></li><li><p>方括号[…]包含可选项。</p><p><code>input_declaration ::= input [range] list_of_variables;</code></p></li><li><p>花括号<code>{}</code>除非以粗体出现，它才表示自己，否则表示重复。重复从左到右进行，和左递归等效。</p><ul><li><p>list_of_param_assignments ::= param_assignment { , param_assignment }</p></li><li><p>list_of_param_assignments ::=<br>param_assignment| list_of_param_assignment , param_assignment</p></li></ul></li><li><p>任何目录的名字以斜体开头，等效于没有斜体部分的目录名。斜体部分只是为了传达<code>semantic information</code>。</p><p><img src="https://image.beenli.cn/img/20200928/OpmV1Dh0HDh6.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p></li><li><p>正文中当一个term被定义时使用斜体；在例子，文件名，常量特别时0，1，x和z的值时使用<code>constant-width</code>字体（等宽字体）</p></li></ol><h1 id="2、Lexical-convention"><a href="#2、Lexical-convention" class="headerlink" title="2、Lexical convention"></a>2、Lexical convention</h1><h2 id="2-1、Lexical-tokens"><a href="#2-1、Lexical-tokens" class="headerlink" title="2.1、Lexical tokens"></a>2.1、Lexical tokens</h2><blockquote><p>Verilog HDL source file shall be a stream of lexical tokens. A <code>lexical tokens</code> shall consist of one or more characters.<br>verilog源文件应该是一连串语法标记，一个语法标记由一个或多个字符组成。</p></blockquote><p>源文件中tokens的位置是随意的，也就是说：除了token分隔符，空格和换行不应该有特殊意义，转义字符除外。</p><p>有如下几种语法标记</p><ul><li>White space</li><li>Comment</li><li>Operator</li><li>Number</li><li>String</li><li>Identifier</li><li>Keyword</li></ul><h2 id="2-2、White-space"><a href="#2-2、White-space" class="headerlink" title="2.2、White space"></a>2.2、White space</h2><p>white space应该包含：用于空格、制表符、换行符和格式提要的字符。这些字符应该被忽略除了当它们用于分割其他语法标记(tokens)。但是blanks和tabs被认为是有意义的字符在字符串中。</p><h2 id="2-3、Comments"><a href="#2-3、Comments" class="headerlink" title="2.3、Comments"></a>2.3、Comments</h2><ul><li>单行注释 <code>//</code></li><li>块注释：<code>/*</code> …. <code>*/</code></li></ul><h2 id="2-4、Operators"><a href="#2-4、Operators" class="headerlink" title="2.4、Operators"></a>2.4、Operators</h2><blockquote><p>操作符可以是单个，双个或三个字符的序列，并被用在表达式中。<a href="#">Clause5</a>将讨论表达式中操作符的使用。</p></blockquote><p>单目运算符(<em>Unary operators</em>)：在操作数(operand)的左边</p><p>双目运算符(<em>Binary operators</em>)：在两个操作数中间</p><p>三木运算符(<em>Triple operator</em> or <em>conditional operator</em>): 有两个操作符字符分割三个操作数（a? x: y)</p><h2 id="2-5、Numbers"><a href="#2-5、Numbers" class="headerlink" title="2.5、Numbers"></a>2.5、Numbers</h2><p><em>Constant numbers</em>可以被指定为<code>integer constant</code>或者<code>real constant</code></p><h3 id="2-5-1、Integer-constant"><a href="#2-5-1、Integer-constant" class="headerlink" title="2.5.1、Integer constant"></a>2.5.1、Integer constant</h3><p>有两种表达方式：</p><ol><li><a href="#simple">简单的十进制数</a>：a sequence of digits of 0 through 9。开头可以加上<code>+</code>或者<code>-</code>（被视为有符号的整数）</li><li>指定基码（d，h，o，b）：可选的<code>位宽</code>+<code>'(ASCII 0x27)</code>+<code>基码</code>+<code>digits</code><ul><li>位宽：非零无符号十进制数</li><li>基码：大小写不敏感；前面可选s指示是否为有符号数（没有s时默认为unsigned integers)</li><li><code>'</code>与<code>基码</code>中间不能有空格。:star:</li><li><code>digits</code>: 应该紧跟着<code>基码</code>，前面也可以有空格。a-f不区分大小写</li><li><a href="#s"><code>s</code>不影响指定的位模式，只改变解释方式。❓</a></li></ul></li></ol><ul><li>负数用补码表示</li><li>x代表<code>unknown value</code>；z代表<code>high-impedance value</code>（x应该设为4bit对于h的基码，3bit对于o的基码；z同理）</li><li><a href="#left pad">如果无符号数位宽小于指定位宽，那么用0填充；</a>如果无符号数最左边的位是x或z;那么用x或z填充。如果无符号位宽大于指定，那么应该从左边截断到指定位宽。</li><li>没有指定位宽的数字至少为<code>32位</code>；对于高位是x或者z的没有位宽无符号常数应位扩展到包含该常数的表达式的大小。❓</li><li><code>?</code>是<code>z</code>的替代字符。在高阻值不需要注意时，可用？来增加可读性。</li><li>在十进制常数中，无符号数不能包含任何x,z,?；除非只有一个digit，指示其中每一位都是x或者z。</li><li><a href="#underscore"><code>_</code>下划线</a>在数字的任何位置都是合法的，除了第一个字符。下划线是没有意义的 ，只是为了分割长的数字提高可读性。</li></ul><p><strong><a name="simple">无符号数：</a></strong></p><pre><code class="hljs verilog"><span class="hljs-comment">/************* Example 1--Unsized constant numbers *****************/</span><span class="hljs-number">659</span>    <span class="hljs-comment">// is a decimal number </span>'h <span class="hljs-number">837</span>FF  <span class="hljs-comment">// is a hexadecimal number </span><span class="hljs-number">'o7460</span>   <span class="hljs-comment">// is an octal number </span><span class="hljs-number">4</span>af   <span class="hljs-comment">// is illegal (hexadecimal format requires 'h)</span><span class="hljs-comment">/************* Example 2--Sized constant numbers *****************/</span><span class="hljs-number">4'b1001</span> <span class="hljs-comment">// is a 4-bit binary number </span><span class="hljs-number">5</span> 'D <span class="hljs-number">3</span> <span class="hljs-comment">// is a 5-bit decimal number </span><span class="hljs-number">3'b01x</span> <span class="hljs-comment">// is a 3-bit number with the least significant bit unknown </span><span class="hljs-number">12'hx</span> <span class="hljs-comment">// is a 12-bit unknown number </span><span class="hljs-number">16'hz</span> <span class="hljs-comment">// is a 16-bit high-impedance number</span></code></pre><p><strong><a name="s">有符号数的表示意义：</a></strong></p><pre><code class="hljs verilog"><span class="hljs-comment">/************* Example 3—Using sign with constant numbers *****************/</span><span class="hljs-number">8</span> 'd -<span class="hljs-number">6</span> <span class="hljs-comment">// this is illegal syntax </span>-<span class="hljs-number">8</span> 'd <span class="hljs-number">6</span> <span class="hljs-comment">// this defines the two's complement of 6, held in 8 bits—equivalent to -(8'd 6) </span><span class="hljs-number">4</span> 'shf <span class="hljs-comment">// this denotes the 4-bit number '1111', to be interpreted as a 2's complement number, </span><span class="hljs-comment">// or '-1'. This is equivalent to -4'h 1 </span>-<span class="hljs-number">4</span> 'sd15 <span class="hljs-comment">// this is equivalent to -(-4'd 1), or '0001'</span><span class="hljs-number">16</span>'sd?   <span class="hljs-comment">// the same as 16'sbz</span></code></pre><p><strong><a name="left pad">自动左填充：</a></strong></p><pre><code class="hljs verilog"><span class="hljs-comment">/************* Example 4—Automatic left padding **************************/</span><span class="hljs-keyword">reg</span>  [<span class="hljs-number">11</span>:<span class="hljs-number">0</span>] a, b, c, d;<span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span>a = 'h x; <span class="hljs-comment">// yields xxx</span>b = 'h <span class="hljs-number">3</span>x; <span class="hljs-comment">// yields 03x</span>c = 'h z3; <span class="hljs-comment">// yields zz3</span>d = 'h <span class="hljs-number">0</span>z3; <span class="hljs-comment">// yields 0z3</span><span class="hljs-keyword">end</span><span class="hljs-keyword">reg</span>  [<span class="hljs-number">84</span>:<span class="hljs-number">0</span>]      e, f, g; e = <span class="hljs-number">'h5</span>;    <span class="hljs-comment">// yields {82{1'b0},3'b101}</span>f = <span class="hljs-number">'hx</span>;    <span class="hljs-comment">// yields {85{1'hx}}</span>g = <span class="hljs-number">'hz</span>;    <span class="hljs-comment">// yields {85{1'hz}}</span></code></pre><p><a name="underscore"><strong>使用下划线：</strong></a></p><pre><code class="hljs verilog"><span class="hljs-comment">/************* Using underscore character in numbers *******************/</span><span class="hljs-number">27_195_000</span> <span class="hljs-number">16'b0011_0101_0001_1111</span> <span class="hljs-number">32</span> 'h <span class="hljs-number">12</span>ab_f001</code></pre><h3 id="2-5-2、Real-constants"><a href="#2-5-2、Real-constants" class="headerlink" title="2.5.2、Real constants"></a>2.5.2、Real constants</h3><blockquote><p><em>real constants</em>用<a href="https://en.wikipedia.org/wiki/IEEE_754-1985" rel="external nofollow noreferrer">IEEE Std 754-1985</a>，双精度浮点数表示</p></blockquote><p>有两种表示方法：</p><ol><li>十进制表示：14.72</li><li>科学计数法：39e8（表示39乘以10的8次方）</li></ol><p>注意：带有小数点的实数至少在小数点两边各有一位。</p><p><code>.12</code> &nbsp;<code>9.</code> &nbsp; <code>4.E3</code> &nbsp; <code>.2e-7</code> 都是不合法的</p><h3 id="2-5-3、Convertion"><a href="#2-5-3、Convertion" class="headerlink" title="2.5.3、Convertion"></a>2.5.3、Convertion</h3><p>实数向整数转化：四舍五入到最近的整数，而不是截断。</p><p>当一个实数被赋值给整数时：进行隐士转化(implicit conversion)</p><p>四舍五入规则：away from zero</p><ul><li>-1.5 转化为-2；1.5转化为2</li></ul><h2 id="2-6、Strings"><a href="#2-6、Strings" class="headerlink" title="2.6、Strings"></a>2.6、Strings</h2><blockquote><p><code>字符串</code>是一个字符序列，用(“ “)括起来，包含在一行中。字符串可以用作表达式的操作数；赋值时被当成无符号整数常数，一个8-bit的ASCII值对应一个字符。</p></blockquote><h3 id="2-6-1、String-variable-declaration"><a href="#2-6-1、String-variable-declaration" class="headerlink" title="2.6.1、String variable declaration"></a>2.6.1、String variable declaration</h3><blockquote><p>字符串变量是<code>reg</code>类型，宽度=字符个数*8</p></blockquote><pre><code class="hljs verilog"><span class="hljs-comment">/********* "Hello world!"一共12个字符 ********/</span><span class="hljs-keyword">reg</span> [<span class="hljs-number">8</span>*<span class="hljs-number">12</span>:<span class="hljs-number">1</span>] stringvar;<span class="hljs-keyword">initial</span>   <span class="hljs-keyword">begin</span>  stringvar = <span class="hljs-string">"Hello world!"</span>;<span class="hljs-keyword">end</span></code></pre><h3 id="2-6-2、String-manipulation"><a href="#2-6-2、String-manipulation" class="headerlink" title="2.6.2、String manipulation"></a>2.6.2、String manipulation</h3><blockquote><p>字符串可以用Verilog的操作符进行操纵。被操纵的值是8bit ASCII值序列</p></blockquote><pre><code class="hljs verilog"><span class="hljs-keyword">module</span>  string_test;<span class="hljs-keyword">reg</span>  [<span class="hljs-number">8</span>*<span class="hljs-number">14</span>:<span class="hljs-number">1</span>] stringvar;<span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span>    stringvar = <span class="hljs-string">"Hello world"</span>;    <span class="hljs-built_in">$display</span> (<span class="hljs-string">"%s is stored as %h"</span>, stringvar,stringvar);    stringvar = {stringvar,<span class="hljs-string">"!!!"</span>};    <span class="hljs-built_in">$display</span> (<span class="hljs-string">"%s is stored as %h"</span>, stringvar,stringvar);<span class="hljs-keyword">end</span><span class="hljs-keyword">endmodule</span><span class="hljs-comment">/************** outputs ****************/</span>Hello world is stored as <span class="hljs-number">00000048656</span>c6c6f20776f726c64Hello world!!! is stored as <span class="hljs-number">48656</span>c6c6f20776f726c64212121</code></pre><ul><li>当变量占用空间大于所分配的空间时，值向右调整，最左边用0填充，与处理非字符串的值一样。</li><li>当占用空间大于分配空间时，字符串还是向右调整，最左边的截断。</li></ul><h3 id="2-6-3-Special-characters-in-strings"><a href="#2-6-3-Special-characters-in-strings" class="headerlink" title="2.6.3 Special characters in strings"></a>2.6.3 Special characters in strings</h3><blockquote><p>有些字符只有前面加上<code>escape character</code>它们才能在字符串里面使用</p></blockquote><p><img src="https://image.beenli.cn/img/20200928/SL0ReCcivKw9.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><h2 id="2-7、Identifiers，keywords-and-system-names"><a href="#2-7、Identifiers，keywords-and-system-names" class="headerlink" title="2.7、Identifiers，keywords,and system names"></a>2.7、Identifiers，keywords,and system names</h2><blockquote><p><code>标识符</code>用于给一个对象独一无二的名字，使得它们能呗引用。</p></blockquote><p>简单的标识符：字母，数字，<code>$</code>,&nbsp;&nbsp;<code>_</code>组成。开头只能是字母或者下划线。（<code>_bus</code>, <code>wan$li</code>)</p><p>实现的时候标识符有最大长度，它的限制应该至少为1024个字符。如果一个标识符长度超过这个，系统应该报错。</p><h3 id="2-7-1-Escaped-identifiers"><a href="#2-7-1-Escaped-identifiers" class="headerlink" title="2.7.1 Escaped identifiers"></a>2.7.1 Escaped identifiers</h3><blockquote><p><code>转义标识符</code>以反斜杠<code>\</code>开始，以<code>white space</code>(space, tab,newline)结束。它们提供了在标识符中包含任何可打印字符的方法（33(!)-126(~)；$21_h$-$7E_h$)。</p></blockquote><p>前导反斜杠和结尾的空白字符都不算标识符的一部分，因此，<code>\cpu3</code>被认为和<code>cpu3</code>一样。</p><pre><code class="hljs verilog">\busa+index\-clock\***error-condition***\net1/\net2\{a,b}\a*(b+c)</code></pre><h3 id="2-7-2-Keywords"><a href="#2-7-2-Keywords" class="headerlink" title="2.7.2 Keywords"></a>2.7.2 Keywords</h3><blockquote><p>关键字是先前定义好的非转义标识符，它们被用来定义语言结构。关键字前面加上转义字符不被解释为关键字</p></blockquote><p><img src="https://image.beenli.cn/img/20200928/uC5F8kwPRFzL.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><h3 id="2-7-3-System-tasks-and-functions❓"><a href="#2-7-3-System-tasks-and-functions❓" class="headerlink" title="2.7.3 System tasks and functions❓"></a>2.7.3 System tasks and functions❓</h3><blockquote><p>美元符号(<script type="math/tex">`)引导一种语言结构：它能开发用户定义的任务和函数；System constructs不是设计原语，而是仿真功能。美元(`</script>)开头的名字被解释为系统任务或者系统函数。</p></blockquote><pre><code class="hljs verilog"><span class="hljs-comment">/*********** for example **********/</span><span class="hljs-built_in">$display</span>  (<span class="hljs-string">"display a message"</span>);<span class="hljs-built_in">$finish</span> ;</code></pre><h3 id="2-7-4-Compiler-directives"><a href="#2-7-4-Compiler-directives" class="headerlink" title="2.7.4 Compiler directives"></a>2.7.4 Compiler directives</h3><blockquote><p>`（ASICC value 0x60)字符引导用于实现编译器指令的语言结构；，一个描述文件中的编译器指令可以控制多个描述文件中的编译行为。</p></blockquote><p>`identifier 编译器指令结构在以下两种地方定义</p><ul><li>标准标识符编译器指令</li><li>由软件实现定义的附加’标识符编译器指令。</li></ul><p>任何有效的标识符，包括已经在除此构造之外的上下文中使用的关键字，都可以用作编译器指令名</p><pre><code class="hljs verilog"><span class="hljs-comment">/*********** for example **********/</span><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span>  wordsize 8</span></code></pre><h2 id="2-8、Attributes"><a href="#2-8、Attributes" class="headerlink" title="2.8、Attributes"></a>2.8、Attributes</h2><blockquote><p>随着使用Verilog HDL作为源代码的仿真器以外的工具的激增(proliferation); Verilog引入一种机制：用于指定关于HDL源代码中对象、语句和语句组的属性，这些属性可被各种工具(包括模拟器)使用，以控制工具的操作或行为。这些属性被称作<code>attribute</code>. 本小节将介绍: 可以用于指定属性的语法机制。</p></blockquote><pre><code class="hljs delphi">attribute_instance ::= <span class="hljs-comment">(* attr_spec { , attr_spec } *)</span>  attr_spec ::= attr_name [ = constant_expression ]attr_name ::= identifier</code></pre><p><code>attribute_instance</code>：1、作为声明，模块项目，语句或者端口连接的前缀。2、运算符或在一个表达式中Verilog函数名的后缀</p><p>如果没有给属性指派值，那么值默认为1；如果对相同的language element定义多个相同的属性名字，那么最后一个属性值将被使用；工具可以在这种情况下给个warning。</p><p>nesting of attribute instances 不被允许；用包含属性实例的常量表达式(constant expression that contains an attribute instance)去给属性赋值是不合法的。</p><h3 id="2-8-1-Examples"><a href="#2-8-1-Examples" class="headerlink" title="2.8.1 Examples"></a>2.8.1 Examples</h3><ul><li><p>范例1：给case语句贴上属性</p><pre><code class="hljs verilog">(* full_case, parallel_case *)<span class="hljs-keyword">case</span>  (foo)&lt;rest_of_case_statement&gt;<span class="hljs-keyword">or</span>(* full_case=<span class="hljs-number">1</span> *)(* parallel_case=<span class="hljs-number">1</span> *) <span class="hljs-comment">// Multiple attribute instances also OK</span><span class="hljs-keyword">case</span>  (foo)&lt;rest_of_case_statement&gt;<span class="hljs-keyword">or</span>(* full_case, <span class="hljs-comment">// no value assigned；默认为1</span>parallel_case=<span class="hljs-number">1</span> *)<span class="hljs-keyword">case</span>  (foo)&lt;rest_of_case_statement&gt;</code></pre></li><li><p>范例2：给模块定义加属性</p><pre><code class="hljs verilog">(* optimize_power *)<span class="hljs-keyword">module</span>  mod1 (&lt;port_list&gt;);</code></pre></li><li><p>范例3：给模块实例加属性</p><pre><code class="hljs verilog">(* optimize_power=<span class="hljs-number">0</span> *)mod1 synth1 (&lt;port_list&gt;);</code></pre></li><li><p>范例4：给reg声明加属性</p><pre><code class="hljs verilog">(* fsm_state *)  <span class="hljs-keyword">reg</span>  [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] state1;(* fsm_state=<span class="hljs-number">1</span> *)  <span class="hljs-keyword">reg</span>  [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] state2, state3;<span class="hljs-keyword">reg</span>  [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] reg1;  <span class="hljs-comment">// this  reg  does NOT have fsm_state set</span>(* fsm_state=<span class="hljs-number">0</span> *)  <span class="hljs-keyword">reg</span>  [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] reg2;  <span class="hljs-comment">// nor does this one</span></code></pre></li><li><p>范例5：给操作符加属性</p><pre><code class="hljs verilog">a = b ? (* no_glitch *) c : d;a = b + (* mode = <span class="hljs-string">"cla"</span> *) c;</code></pre></li></ul><h3 id="2-8-2-Syntax-省略"><a href="#2-8-2-Syntax-省略" class="headerlink" title="2.8.2 Syntax(省略)"></a>2.8.2 Syntax(省略)</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、Overview&quot;&gt;&lt;a href=&quot;#1、Overview&quot; class=&quot;headerlink&quot; title=&quot;1、Overview&quot;&gt;&lt;/a&gt;1、Overview&lt;/h1&gt;&lt;h2 id=&quot;1-1-Convention&quot;&gt;&lt;a href=&quot;#1-1-Con
      
    
    </summary>
    
    
      <category term="Digital IC" scheme="https://www.beenli.cn/categories/Digital-IC/"/>
    
      <category term="verilog" scheme="https://www.beenli.cn/categories/Digital-IC/verilog/"/>
    
    
      <category term="specification" scheme="https://www.beenli.cn/tags/specification/"/>
    
  </entry>
  
  <entry>
    <title>数据通路(4)--Multiple Issue</title>
    <link href="https://www.beenli.cn/posts/a36b1d36/"/>
    <id>https://www.beenli.cn/posts/a36b1d36/</id>
    <published>2020-09-27T11:04:08.000Z</published>
    <updated>2020-09-28T03:50:35.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><blockquote><p><code>指令集并行</code>(instruction-level parallelism)有两种方式</p><p>Ⅰ、<a href="https://www.beenli.cn/posts/d4768fc/">Pipeline</a>——详见数据通路(3)；流水线越深，并行度越高。</p><p>Ⅱ、<code>多发射</code>（multiple issue）: 本节所要讲述的重点。通过复制计算机内部部件的数量，使得每个流水级可以启动多条指令</p></blockquote><ul><li>多发射可以使指令执行速度超过时钟的速度，即CPI小于1。</li><li>实现多发射有两种办法：1、<code>static multiple issue</code>；2、<code>dynamic multiple issue</code>。</li></ul><p>多发射流水线必须处理以下两个问题：</p><ol><li>打包指令到<code>发射槽</code>(issue slots)：在大多数静态多发射实现上：在一个时钟周期发射多少条指令，哪些指令被发射这个过程至少很大一部分由编译器来完成。而在动态发射处理器中，这个问题一般由处理器在运行时来处理。（尽管编译器已经优化了指令顺序来尽可能多发射）</li><li>处理数据和控制冒险：在静态发射处理器中，编译器解决大部分或者所有的可能冒险。与此相反的，动态发射处理器用硬件技术在运行时至少消除某些类别的冒险。</li></ol><blockquote><p>尽管，我们把它们描述成不同的方法，但事实上，一个方法经常借助另外一个方法的技术。</p></blockquote><h1 id="Speculation-推测"><a href="#Speculation-推测" class="headerlink" title="Speculation(推测)"></a><a name="spec">Speculation(推测)</a></h1><p class="note note-primary"><font color="blue">speculation</font>: An approach whereby the compiler or processor guesses the outcome of an instruction to remove it as a dependence in executing other instructions<br>提前给出结果(猜测)来避免后面的指令对正在运行指令的依赖</p><p>以下是几种猜测的情形：</p><ul><li>我们猜测分支的结果，那样分支后面的指令可以提早执行。</li><li>我们猜测存字和取字指令访问的不是同一个地址，那样我们在执行存字指令前去执行取字指令。</li></ul><p>但是，猜测可能出现错误❌。所以：任何推测技术都必须包含一种机制：1、检查推测是否正确；2、回滚由于推测提前执行的指令的影响。</p><ol><li><p>推测错误时恢复机制：</p><ul><li>for compile: 插入额外的指令检查推测的正确性✔并提供一个fix-up例程供推测错误时使用。</li><li>for processor: 用buffer缓存推测结果直到推测的结果得到确认。如果推测正确，把缓存的能容写到相应的寄存器中，指令完成。如果推测不正确，硬件冲刷掉buffer，重新执行正确的指令序列。</li></ul></li><li><p>推测可能引入另外的问题：对某些指令的推测会导致原本不存在的异常发生。比如，推测执行一条装载指令，在推测错误的情况下，该指令所使用的地址是非法的。</p></li></ol><h1 id="Static-multiple-issue"><a href="#Static-multiple-issue" class="headerlink" title="Static multiple-issue"></a>Static multiple-issue</h1><p class="note note-primary">Static multiple-issue processers all use the compiler to assist with packaging instructions and handling hazards.</p><p><code>issue packet</code>(发射包)：在一个时钟周期内可以发射的指令集合，可以用一条完成多种操作的长指令来类比</p><p><code>Very Long Instruction Word</code>(超长指令字)：一种指令集架构，能够发射多条操作，这些操作在单个指令中被定义为独立的，并且一般都有独立的操作码域。</p><ul><li><p>静态多发射处理器有两种：</p><ol><li>编译器避免所有冒险；</li><li>硬件检测数据冒险，并在两个发射包间产生阻塞，而编译器只负责避免一个指令包间的依赖。</li></ol></li><li><p>为了并行发射ALU和数据传输操作，需要有额外的硬件：</p><ol><li>寄存器堆要有额外的端口供连个操作读取操作数；</li><li>要有额外的ALU来同时执行EX阶段。</li></ol></li><li><p>多发射带来的问题：由于额外的指令重叠，冒险的可能性加倍。</p><ol><li>装载指令有一个时钟周期的<code>使用延迟</code>（use latency)；这意味着下一个发射包中所有指令都不能使用装载的结果。</li><li>原本没有使用延迟的ALU指令，其结果不能被在同一个发射包的其他指令使用。</li></ol></li></ul><p><img src="https://image.beenli.cn/img/20200927/pFpgnJVAbslU.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li><code>循环展开</code>(loop unrolling)：一种从访问数组的循环程序中获得更多性能的技术。其中循环体会被复制多份并且在不同循环体中的指令会调度在一起。</li></ul><pre><code class="hljs c"><span class="hljs-comment">/***************** 例程：把一段数组中的数全部加上一个数(x21)  ********************/</span>Loop:  ld  x31, <span class="hljs-number">0</span>(x20)  <span class="hljs-comment">// x31=array element</span>       add  x31, x31, x21   <span class="hljs-comment">// add scalar in x21</span>       sd  x31, <span class="hljs-number">0</span>(x20) <span class="hljs-comment">// store result</span>       addi  x20, x20, <span class="hljs-number">-8</span>   <span class="hljs-comment">// decrement pointer</span>       blt  x22, x20, Loop  <span class="hljs-comment">// compare to loop limit,branch if x20 &gt; x22</span></code></pre><blockquote><p>不进行循环展开的静态多发射调度：</p></blockquote><p><img src="https://image.beenli.cn/img/20200928/dGh2jYTva3bm.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><blockquote><p>循环展开结果：</p></blockquote><p><img src="https://image.beenli.cn/img/20200928/5Sd7gcLfIrQ5.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li>在循环展开过程中，编译器引入了几个临时编译器（x28、x29、x30）。这个过程叫做<code>寄存器重命名</code>: 目的是消除一些虚假依赖。</li><li>如果我们只使用x31寄存器：我们将在sd x31,8(x20)后面重复ld x31,0(x20), add x31, x31, x21。但是这些序列尽管都使用x31，它们实际上是不相关的。</li><li><code>antidependence</code> or <code>name dependence</code>(反相关或名字相关)：一组指令集和下一组指令集之间no data value flow，仅仅是因为重用寄存器名引起的相关。</li></ul><h1 id="Dynamic-multiple-issue"><a href="#Dynamic-multiple-issue" class="headerlink" title="Dynamic multiple-issue"></a>Dynamic multiple-issue</h1><p class="note note-primary">Dynamic multiple-issue processors are also known as <font color="blur">superscalar</font> processors, or simply superscalars</p><h2 id="Basic-concept"><a href="#Basic-concept" class="headerlink" title="Basic concept"></a>Basic concept</h2><p>最简单的超标量处理器：指令按顺序发射，处理器决定每个周期发射0条，1条或多条指令。</p><p>显然为了获得好的性能，处理器仍然需要编译器帮忙编排指令顺序来减少依赖。</p><p>简单超标量处理器与VLIW处理器(静态发射)的区别：</p><ul><li>for superscalar:：1、不管是否经过编译器编排指令顺序，都由硬件来保证执行的正确性✔。2、编译过的代码将始终正确的运行，无论发射速率还是流水线架构。</li><li>for VLIW：不像👆那样，当移植到不同的处理器模型往往需要重新编译。在其他的静态发射处理器中，代码能够在不同的处理器实现上正确运行，但是效率很差也需要重新编译。</li></ul><p>许多超标量处理器扩展了基本的动态发射策略，将<font color="blue">dynamic pipeline scheduling(动态流水线调度)</font>包含进来。</p><pre><code class="hljs c"><span class="hljs-comment">/*************** 一个简单的例子 **************/</span>ld  x31, <span class="hljs-number">0</span>(x21)add  x1,  x31, x2sub  x23, x23, x3andi  x5,  x23, <span class="hljs-number">20</span></code></pre><blockquote><p><font color="red">说明</font>：即使sub指令准备好执行，它也必须等待ld和add指令先结束才行。如果内存很慢，sub指令可能会等待多个周期（比如cache没有命中）</p></blockquote><h2 id="dynamic-pipeline-scheduling"><a href="#dynamic-pipeline-scheduling" class="headerlink" title="dynamic pipeline scheduling"></a>dynamic pipeline scheduling</h2><blockquote><p>Dynamic pipeline scheduling chooses which instructions to execute next, possibly reordering them to avoid stalls.<br><strong>动态调度可以运行时动态调整指令顺序</strong></p></blockquote><p>流水线被分为三个主要部分：</p><ul><li>an instruction fetch and issue unit（取指发射单元)</li><li>multiple functional units（多种功能单元）</li><li>commit unit(提交单元)</li></ul><p><img src="https://image.beenli.cn/img/20200928/CiiibeQE7Kom.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ol><li>每个功能单元有个buffer, 称为<code>保留站</code>（reservation station)，其中保存着操作数和操作(opcode ❓)。</li><li>功能单元运算完成的结果传送给1、commit unit；2、旁路给所需的保留站。</li><li>提交单元也有buffer，称为<code>reorder buffer</code>(重排序缓冲区)：缓存结果直到确定是安全时才写入register file或者memory。</li></ol><blockquote><p><strong>保留站缓存操作数➕提交单元缓存结果＝＝》寄存器重命名</strong></p><ul><li>发射指令时，它被复制到对应功能单元的保留站上，如果它的操作数在寄存器堆或者提交单元缓冲区中有，那么操作数立马复制到保留站。如果指令已经发射，那么对应操作数的副本不再需要，可以重写覆盖。</li><li>如果一个操作数不在register file or reorder buffer，他必须等待某个功能单元的结果。硬件帮助追踪所需的功能单元，当单元计算出结果直接复制到保留站而旁路掉寄存器堆。</li></ul></blockquote><p><code>out-of-order execution</code>(乱序执行)：处理器在不违背原有数据流顺序的前提下以某种顺序执行各条指令，但是执行指令的顺序可以与取指不同。</p><p><code>in-order commit</code>(顺序提交)：流水线执行的结果以取指顺序写回程序员可见的寄存器的一种提交方式。（当异常发生时，处理器可以找到最后执行的那条指令，而只有这条导致异常的指令之前的指令才能对寄存器状态进行改变。</p><p><a href="#spec">推测</a>和动态调度经常结合在一起：</p><ul><li>通过对分支的预测，动态调度可以在推测方向上进行取指和执行。由于指令是顺序提交，我们可以在分支指令及所有推测执行的指令提交前知道推测是否准确。</li><li>通过对装载指令目的地址的预测，对存取指令进行重排序和利用提交单元避免错误的推测。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;指令集并行&lt;/code&gt;(instruction-level p
      
    
    </summary>
    
    
      <category term="CS" scheme="https://www.beenli.cn/categories/CS/"/>
    
      <category term="Computer Organization &amp; Design" scheme="https://www.beenli.cn/categories/CS/Computer-Organization-Design/"/>
    
    
      <category term="processor" scheme="https://www.beenli.cn/tags/processor/"/>
    
  </entry>
  
  <entry>
    <title>数据通路(3)--Pipeline &amp; hazards</title>
    <link href="https://www.beenli.cn/posts/d4768fc/"/>
    <id>https://www.beenli.cn/posts/d4768fc/</id>
    <published>2020-09-25T10:32:54.000Z</published>
    <updated>2020-09-27T11:48:50.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、An-Overview-of-Pipeline"><a href="#1、An-Overview-of-Pipeline" class="headerlink" title="1、An Overview of Pipeline"></a>1、An Overview of Pipeline</h1><blockquote><p><code>流水线</code>就像工厂的工人一样，每个工人只做一道工序（每个硬件只做一个功能)，同一时间几道工序同时在做(同一时间多条指令同时执行，每条指令在不同的阶段)，最后一道工序做完即完成了一件产品(所以吞吐量非常大)。</p></blockquote><p><img src="https://image.beenli.cn/img/20200925/CH2JrES42Wqd.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><h2 id="RISC-V经典流水线可以分为五步"><a href="#RISC-V经典流水线可以分为五步" class="headerlink" title="RISC-V经典流水线可以分为五步"></a>RISC-V经典流水线可以分为五步</h2><ul><li>Fetch instruction from memory（IF)</li><li>Read register and decode the instruction(ID)</li><li>Execute the operation or calculate an address(EX)</li><li>Access an operand in data memory (MEM) [if necessary]</li><li>Write the result into a register(WB) [if necessary]</li></ul><h2 id="面向流水线的指令集设计"><a href="#面向流水线的指令集设计" class="headerlink" title="面向流水线的指令集设计"></a>面向流水线的指令集设计</h2><ul><li><p>RISC-V 指令等长，这一限制简化了第一级取指与第二级译码。</p><p>【x86指令长度不等，从1字节到15字节不等。最近x86体系结构：先转化为简单的操作】</p></li><li><p>RISC-V只有几种指令格式，每一种指令源和目的寄存器字段位置不变。</p><p>【使得第二级在确定指令类型的同时开始读寄存器堆】</p></li><li><p>RISC-V的memory operands仅仅出现在存取指令中(常规ALU指令的操作数直接在第二级寄存器堆读出)。意味着我们可以在执行阶段计算内存地址，然后在下一个阶段访存。</p><p>【如果像x86那样可以操作在内存中的操作数，那么第三、四级将扩展为address stage，memory stage，execute stage】</p></li></ul><h2 id="流水线控制"><a href="#流水线控制" class="headerlink" title="流水线控制"></a>流水线控制</h2><p><img src="https://image.beenli.cn/img/20200925/IekslQjza2wy.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><h1 id="2、Pipeline-Hazards"><a href="#2、Pipeline-Hazards" class="headerlink" title="2、Pipeline Hazards"></a>2、Pipeline Hazards</h1><blockquote><p>There are situation in pipelining when the next instruction cannot execute in the following clock cycle. These events are called <code>hazards</code>.</p></blockquote><h2 id="1、Structural-Hazard"><a href="#1、Structural-Hazard" class="headerlink" title="1、Structural Hazard"></a>1、Structural Hazard</h2><p class="note note-info">When a planned instruction cannot execute in the proper clock cycle because the hardware does not support the combination of instructions that are set to execute</p><p><strong></strong></p><center><strong>[由于硬件资源不够导致的冒险]</strong></center><p></p><p>这也是为什么我们我们的IF和MEM分开（指令寄存器和数据寄存器）</p><h2 id="2、Data-Hazard"><a href="#2、Data-Hazard" class="headerlink" title="2、Data Hazard"></a>2、Data Hazard</h2><p class="note note-info">When a planned instruction cannot execute in the proper clock cycle because data that are needed to execute the instruction are not yet available</p><p><strong></strong></p><center><strong>[由于操作数没有准备好导致的冒险]</strong></center><p></p><p>三种经典解决办法</p><ul><li>Reorder code(重新安排代码)</li><li>stall the pipeline(阻塞一个或几个周期)</li><li>bypass or forwarding(旁路或者前推上一条指令运算的结果)</li></ul><h3 id="①Reorder-code"><a href="#①Reorder-code" class="headerlink" title="①Reorder code"></a>①Reorder code</h3><pre><code class="hljs C"><span class="hljs-comment">//code segment in C</span>a = b + e;c = b + f;<span class="hljs-comment">//generated RISC-V code for above segment</span>ld x1, <span class="hljs-number">0</span>(x31)<span class="hljs-comment">// Load b   1</span>ld x2, <span class="hljs-number">8</span>(x31)<span class="hljs-comment">// Load e2</span>add x3, x1, x2<span class="hljs-comment">// b + e3</span>sd x3, <span class="hljs-number">24</span>(x31)<span class="hljs-comment">// Store a4</span>ld x4, <span class="hljs-number">16</span>(x31)<span class="hljs-comment">// Load f5</span>add x5, x1, x4<span class="hljs-comment">// b + f6</span>sd x5, <span class="hljs-number">32</span>(x31)<span class="hljs-comment">// Store c7</span><span class="hljs-comment">/************** 说明 *****************</span><span class="hljs-comment">1、通过旁路可以去除3对1的依赖(load 指令最少需要两个周期，ALU指令在旁路技术下对下一条指令不会构成数据冒险）</span><span class="hljs-comment">2、通过旁路也可解决sd指令对上一条add指令的依赖</span><span class="hljs-comment">3、需要解决的: 3V2和6V5         */</span><span class="hljs-comment">//************* 解决办法 ***************</span>把第<span class="hljs-number">5</span>条指令提到第二条指令和第三条中间。</code></pre><h3 id="②Bypassing"><a href="#②Bypassing" class="headerlink" title="②Bypassing"></a>②Bypassing</h3><p><img src="https://image.beenli.cn/img/20200925/9t5mAjk5HVXm.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li>and指令需要x2，而x2只有等到第一条指令写回才有效(即第五个周期前半段)</li><li>同理or指令</li><li>❓假设: 写寄存器操作发生时钟周期的前半段而读寄存器操作发生在时钟周期后半段</li></ul><p class="note note-info">旁路的核心：前一条指令计算的结果不用等到第五周期写回寄存器堆而提前旁路到其后指令的ALU操作数输入上。</p><p><img src="https://image.beenli.cn/img/20200925/DyyhciQAJVxi.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li><p>EX冒险（EX/MEM流水线寄存器有需要的值）</p><pre><code class="hljs c"><span class="hljs-keyword">if</span>  (EX/MEM.RegWrite<span class="hljs-keyword">and</span>  (EX/MEM.RegisterRd ≠ <span class="hljs-number">0</span>)<span class="hljs-keyword">and</span>  (EX/MEM.RegisterRd = ID/EX.RegisterRs1)) ForwardA = <span class="hljs-number">10</span><span class="hljs-keyword">if</span>  (EX/MEM.RegWrite<span class="hljs-keyword">and</span>  (EX/MEM.RegisterRd ≠ <span class="hljs-number">0</span>)<span class="hljs-keyword">and</span>  (EX/MEM.RegisterRd = ID/EX.RegisterRs2)) ForwardB = <span class="hljs-number">10</span></code></pre></li><li><p>MEM hazard</p><pre><code class="hljs c"><span class="hljs-keyword">if</span>  (MEM/WB.RegWrite<span class="hljs-keyword">and</span>  (MEM/WB.RegisterRd ≠ <span class="hljs-number">0</span>)<span class="hljs-keyword">and</span>  <span class="hljs-keyword">not</span>(EX/MEM.RegWrite <span class="hljs-keyword">and</span> (EX/MEM.RegisterRd ≠ <span class="hljs-number">0</span>)<span class="hljs-keyword">and</span> (EX/MEM.RegisterRd = ID/EX.RegisterRs1))      <span class="hljs-comment">// 先判断不是EX冒险，不然应该是旁路上一条指令EX/MEM结果旁路上上条MEM/WB</span><span class="hljs-keyword">and</span>  (MEM/WB.RegisterRd = ID/EX.RegisterRs1)) ForwardA = <span class="hljs-number">01</span><span class="hljs-keyword">if</span>  (MEM/WB.RegWrite<span class="hljs-keyword">and</span>  (MEM/WB.RegisterRd ≠ <span class="hljs-number">0</span>)<span class="hljs-keyword">and</span>  <span class="hljs-keyword">not</span>(EX/MEM.RegWrite <span class="hljs-keyword">and</span> (EX/MEM.RegisterRd ≠ <span class="hljs-number">0</span>)<span class="hljs-keyword">and</span> (EX/MEM.RegisterRd = ID/EX.RegisterRs2))<span class="hljs-keyword">and</span>  (MEM/WB.RegisterRd = ID/EX.RegisterRs2)) ForwardB = <span class="hljs-number">01</span></code></pre><hr></li></ul><p><img src="https://image.beenli.cn/img/20200925/0sMUpSTpeddo.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li>旁路单元产生控制信号选着ALU的输入operand。</li></ul><h3 id="③Stalls"><a href="#③Stalls" class="headerlink" title="③Stalls"></a>③Stalls</h3><p class="note note-info">需要阻塞的情形：当一条指令试图读取一个由前一条装载指令读入的寄存器时，就无法使用旁路解决冒险(因为lw指令需要在第四阶段才能产生结果)</p><ol><li><p>冒险检测单元</p><pre><code class="hljs c"><span class="hljs-keyword">if</span>  (ID/EX.MemRead <span class="hljs-keyword">and</span>((ID/EX.RegisterRd = IF/ID.RegisterRs1) <span class="hljs-keyword">or</span>(ID/EX.RegisterRd = IF/ID.RegisterRs2)))stall the pipeline</code></pre></li><li><p>检测单元工作在ID阶段。</p></li><li><p>阻塞后面指令的方法：保持PC寄存器和IF/ID流水线寄存器不变。</p></li><li><p>插入一条空指令（nop)：一种不进行任何操作或不改变任何状态的指令。</p><p>实现方法：控制信号全部置为0，这些控制信号在每个时钟周期都向前传递，但不会产生不良影响，因为控制为0，那么所有寄存器和存储器都不进行写操作。</p></li></ol><p><img src="https://image.beenli.cn/img/20200925/2CuKo0v4bF7b.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><h2 id="3、Control-Hazard"><a href="#3、Control-Hazard" class="headerlink" title="3、Control Hazard"></a>3、Control Hazard</h2><p class="note note-info">An instruction must be fetched at every clock cycle to sustain the pipeline, yet in our design the decision about whether to branch doesn't occur until the MEM pipeline stage.<br>(后面的优化🙆‍看到在ID级就可以确定分支)</p><p><strong></strong></p><center><strong>[由于选择✔的指令需要延迟]</strong></center><p></p><h3 id="①Branch"><a href="#①Branch" class="headerlink" title="①Branch"></a>①Branch</h3><ol><li><p>假定分支不发生（如果发生预取和译码的指令要丢弃）</p></li><li><p>缩短分支延迟（提早确定分支，减少flush的指令数）</p><ul><li><p>计算分支目标地址（IF/ID流水线寄存器已经有了PC和立即数字段的值）</p></li><li><p>判断分支条件：需要额外的旁路和冒险检测硬件。【因为分支条件的判断可能依赖于还在流水线中的结果】</p><blockquote><p>两个难点：</p><p>Ⅰ、前面的ALU旁路单元在EX级，所以这里需要一个新的旁路单元工作在ID级。还需要一个<code>equality test logic</code>（对两个寄存器的值按位异或接着或操作）</p><p>Ⅱ、可能数据在ID级旁路不过来。上一条是ALU指令，那么只能<code>stall a cycle</code>；如果是lw指令，那么必须<code>stall two cycles</code>。</p><p>Ⅲ、控制信号新增一个<code>IF.flush</code>信号，把预取的那条指令变成nop指令。</p></blockquote></li></ul></li><li><p>动态分支预测(缓存之前运行分支的信息进行判断)<br>fetching new instructions from the same places as the last time.)</p><ul><li><code>分支预测缓存</code>(branch prediction buffer)也称为<code>分支历史记录表</code>(branch history table):使用分支指令地址地位索引的一小块存储区。</li><li>这类缓存我们实际上不知道预测是否正确，而且它还可能由其他具有相同地址地位的分支设置。</li><li>预测错误❌时，错误的预取指令删除，预测位取反，回到原来的位置（❓得有缓存），继续按照正确的方向取指并执行。</li><li>分支预测缓存可以用很小，用指令地址访问的special buffer in IF pipe stage。如果预测分支，那么从分支target取指令。</li><li>为了改善非常有规律的分支的预测正确率（比如循环，9次分支只有最后一次循环退出不分支）；可以使用<code>两位的预测机制</code>。</li></ul><p><img src="https://image.beenli.cn/img/20200927/XfbMg3jzjpEc.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li><code>相关预测器</code>（correlation predictors)：不仅使用local branch的信息，还综合global behavior of recently executed branches 。典型的相关预测器为每个分支提供两个两位的预测器，根据上一次分支是否执行选择其中一个预测器，因此全局分支行为可以看成adding additional index bits for the prediction lookup.</li><li><code>竞争预测器</code>(tournament branch predictor)：为每个分支使用多个预测器，并记录哪个预测器预测结果最好。典型的竞争预测器：对每个分支索引包含两个预测结果，一个基于本地信息，一个基于全局分支行为。一个选择器选择哪个作为预测结果。</li><li><code>条件移动指令</code>(conditional move instruction)：不同于分支指令改变PC值，条件移动指令将根据条件改变move指令的目的寄存器。在ARMv8指令集架构中：CSEL X8, X11,X4,NE 如果条件码不为零，复制x11到x8；否则复制X4到X8;</li></ul></li></ol><h3 id="②Exception"><a href="#②Exception" class="headerlink" title="②Exception"></a>②Exception</h3><p class="note note-danger">Control is the most challenging aspect of processor design: it is both the hardest part to get right and toughest part to make fast<br>然而控制中最难的就是实现异常或中断——除分支外改变正常指令执行流</p><p>当异常发生时，处理器必须做的基本事情是：</p><ul><li>在<code>SEPC</code>(supervisor exception cause register)保存出错指令的地址</li><li>把控制权交给操作系统的特定地址处</li></ul><p>对于处理异常的OS,它必须知道异常的原因：</p><ul><li><p>设置一个<code>原因寄存器</code>（Supervisor Exception Cause Register or SCAUSE):其中有个域指示异常的原因</p></li><li><p>使用<code>向量中断</code>(vectored interrupts), 控制权被转移到的地址是由异常原因决定，该地址可能被添加到指向向量中断内存范围的base register中。例如，我们可以使用下面的异常中断向量地址来表示异常种类。</p><p><img src="https://image.beenli.cn/img/20200927/MKHGADukdjKe.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p></li></ul><p>异常在流水线中的实现(使用自前相同的机制，不过这次由异常重置控制信号)</p><ul><li>IF级指令的清除用之前的<code>IF.flush</code>信号</li><li>新增<code>ID.Flush</code>信号和之前的冒险检测单元产生的stall信号进行或运算，然后加在自前的多选器上，实现ID级指令清除</li><li>新增一个<code>EX.Flush</code>信号清除EX级的指令</li><li>为了从异常处理程序的地址取指，只要简单家一个额外的输入到PC的多选器。</li></ul><p><img src="https://image.beenli.cn/img/20200927/W5ek8iOsIVie.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、An-Overview-of-Pipeline&quot;&gt;&lt;a href=&quot;#1、An-Overview-of-Pipeline&quot; class=&quot;headerlink&quot; title=&quot;1、An Overview of Pipeline&quot;&gt;&lt;/a&gt;1、An Overvi
      
    
    </summary>
    
    
      <category term="CS" scheme="https://www.beenli.cn/categories/CS/"/>
    
      <category term="Computer Organization &amp; Design" scheme="https://www.beenli.cn/categories/CS/Computer-Organization-Design/"/>
    
    
      <category term="processor" scheme="https://www.beenli.cn/tags/processor/"/>
    
  </entry>
  
  <entry>
    <title>数据通路(2)--Control</title>
    <link href="https://www.beenli.cn/posts/f0189490/"/>
    <id>https://www.beenli.cn/posts/f0189490/</id>
    <published>2020-08-20T12:54:40.000Z</published>
    <updated>2020-09-27T11:07:21.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、ALU控制"><a href="#1、ALU控制" class="headerlink" title="1、ALU控制"></a>1、ALU控制</h1><blockquote><p>MIPS ALU在4位控制信号上定义了6种有效的输入组合</p></blockquote><p><img src="https://image.beenli.cn/img/20200820/VGrg5UNVVt4J.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li>存储器访问指令：add</li><li>R型指令：根据指令低6位的funct字段<a href="#link"><sup>1</sup></a> ，ALU执行5种操作中的一种(nor暂时没用)</li><li>branch指令：sub(两个操作数相减判断是否为零)</li></ul><ul><li><code>多级译码</code>：输入：6位funct字段和2位ALUOP字段————&gt;输出：4位ALU control lines</li></ul><p><img src="https://image.beenli.cn/img/20200820/xlEg0oIEPQA5.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><center>主控制单元生成ALUOP</center><ul><li>真值表——优化后转换为门电路（坑待定）</li></ul><p><img src="https://image.beenli.cn/img/20200820/fBArSknPUEb4.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><h1 id="2、主控制单元"><a href="#2、主控制单元" class="headerlink" title="2、主控制单元"></a>2、主控制单元</h1><div id="link"></div><ul><li>指令格式</li></ul><p><img src="https://image.beenli.cn/img/20200820/MLWQrvKbTmz4.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li>R型指令opcode为0；lw为35；sw为43 ; branch为<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8">4⃣</span></li></ul><p><img src="https://image.beenli.cn/img/20200820/w7nhaHnvyrH3.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><center>7个多选器控制信号的作用</center><p><img src="https://image.beenli.cn/img/20200820/kdnnx95gnWHt.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><center>主控单元产生7个一位控制信号+2位ALUOP</center><ul><li><p>控制信号真值表</p><p><img src="https://image.beenli.cn/img/20200820/xa7NDi0PBA7x.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p></li><li><p>op[5:0]取至Instruction[31:26]</p></li><li>RegDst: R为1表示目的寄存器为rd; lw为rs; sw和branch不用写回寄存器堆所以没有目的寄存器。</li><li>ALUSrc: R和branch为0表示ALU第二个操作数来自rt; lw和sw表示第二个操作数来自低16位的扩展。</li><li>MemtoReg: sw和branch为x表示不用写回。R为0表示ALU计算结果写回；lw表示数据寄存器取出来的数写回</li><li>Regwirte: R和lw要写回所以为1。</li><li>MenRead: 只要lw要读所以只有lw为1</li><li>MemWrite: 只有sw要写</li><li>Branch: 只有branch才触发</li><li>ALUOP: R为10；存储为00；branch为01</li></ul><ul><li><p>跳转实现（即改变PC的值）</p><p>其OPcode为2.低26位都是offset_address。</p><p><img src="https://image.beenli.cn/img/20200820/PCxbE327wJVr.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、ALU控制&quot;&gt;&lt;a href=&quot;#1、ALU控制&quot; class=&quot;headerlink&quot; title=&quot;1、ALU控制&quot;&gt;&lt;/a&gt;1、ALU控制&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;MIPS ALU在4位控制信号上定义了6种有效的输入组合&lt;/p&gt;&lt;/bloc
      
    
    </summary>
    
    
      <category term="CS" scheme="https://www.beenli.cn/categories/CS/"/>
    
      <category term="Computer Organization &amp; Design" scheme="https://www.beenli.cn/categories/CS/Computer-Organization-Design/"/>
    
    
      <category term="processor" scheme="https://www.beenli.cn/tags/processor/"/>
    
  </entry>
  
  <entry>
    <title>数据通路(1)--Basic Datapath</title>
    <link href="https://www.beenli.cn/posts/74018a17/"/>
    <id>https://www.beenli.cn/posts/74018a17/</id>
    <published>2020-08-20T07:10:16.000Z</published>
    <updated>2020-09-27T11:08:18.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、Preface"><a href="#1、Preface" class="headerlink" title="1、Preface"></a>1、Preface</h1><blockquote><p>计算机性能：①指令数目(编译器和指令集），②时钟周期长度(组合电路最大延时)，③每条指令所需要的时钟周期数(处理器架构，指令类别，多发射超标量流水)</p></blockquote><p>本篇只是一个基本的<code>MIPS</code>实现。</p><ul><li>存储器访问指令：取字(<code>lw</code>) 和存字(<code>sw</code>)</li><li>算数逻辑指令：加法(<code>add</code>)、减法(<code>sub</code>)、与运算(<code>and</code>)、或运算(<code>or</code>)和小于则设置(<code>slt</code>)</li><li>分支指令：相等则分支(<code>beq</code>)和跳转(<code>j</code>)</li></ul><p><img src="https://image.beenli.cn/img/20200820/yKiuzyrIln7F.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ol><li><p><code>R指令</code>对应算数逻辑指令。(rs, rt对应两个源操作数，rd对应目的寄存器)</p><pre><code class="hljs assembly">add $t1, $t2, $t3 # $t1=$t2+$t3slt $to, $s0, $a1 # reg $t0 = 0 if $s0 &gt;= $a1</code></pre></li><li><p><code>I指令</code>对应访存和分支指令。</p><pre><code class="hljs assembly">sw $t1, offset_value($t2) # 把$t1的值存到以$t2为基址加上16位地址偏移上去。  # rs=$t2, rt=$t1(目标寄存器),[15:0]=offsetlw $t1, offset_value($t2) # 把$t2为基址加上16位地址偏移所在地址的值存到t1。beq $t3, $zero, loop1  # if($t3==$zero) go to loop1  # loop1是后16位。rs=$t3,rt=$zero;</code></pre></li><li><p><code>J指令</code>对应无条件跳转</p><pre><code class="hljs assembly">j for2tst  # jump tp for2tst</code></pre></li></ol><h1 id="2、An-Overview-of-the-Implementation"><a href="#2、An-Overview-of-the-Implementation" class="headerlink" title="2、An Overview of the Implementation"></a>2、An Overview of the Implementation</h1><ul><li>实现每条指令的前两步是一样的<ol><li>程序计数器(PC)指向指令所在的存储单元，并从中取出指令。(PC是地址)</li><li>通过指令字段内容，选择读取一个或两个寄存器。对于取字指令，只需读一个寄存器即<code>rs</code>,而其它大多数指令要求读取两个寄存器（<code>rs</code>， <code>rt</code>)。</li></ol></li></ul><blockquote><p>前面两步完成后，为完成指令而进行的后续步骤则取决于具体的指令类型</p></blockquote><p><img src="https://image.beenli.cn/img/20200820/U2dhJ3SxBt84.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ol><li>所有指令中除了<code>jump</code>，在读取寄存器后都要使用ALU。<ul><li>访存指令：address calculation</li><li>算术逻辑指令：operation execution</li><li>分支指令：comparison</li></ul></li><li>ALU之后又各不相同<ul><li>访问Data Memory: <code>store指令</code>要写入数据到data memory；<code>load指令</code>要从memory读数据</li><li>写回registers: <code>R指令</code>需要把ALU计算的结果; <code>load指令</code>要data memory读出的数据</li><li>改变PC: 如果分支成立那么改变PC值，否则自增4。</li></ul></li></ol><h1 id="3、Building-a-Datapath"><a href="#3、Building-a-Datapath" class="headerlink" title="3、Building a Datapath"></a>3、Building a Datapath</h1><blockquote><p>数据通路部件：一个用来操作或保存处理器中数据的单元。在MPIS实现中，数据通路部件包括<code>指令存储器</code>、<code>数据存储器</code>、<code>寄存器堆</code>、<code>ALU</code>、<code>加法器</code>.</p></blockquote><h2 id="3-1、basic-components"><a href="#3-1、basic-components" class="headerlink" title="3.1、basic components"></a>3.1、basic components</h2><p><img src="https://image.beenli.cn/img/20200820/N8jUdro8qK22.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><center>取指令，更新指令</center><p><img src="https://image.beenli.cn/img/20200820/mNdvEm8uGB4b.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><center>根据寄存器号取操作数进行ALU运算</center><p><img src="https://image.beenli.cn/img/20200820/wXPwKwvLR8RN.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><center>向内存读或者写数据</center><h2 id="3-2、combination-components"><a href="#3-2、combination-components" class="headerlink" title="3.2、combination components"></a>3.2、combination components</h2><p><img src="https://image.beenli.cn/img/20200820/96jAaA7ct7r0.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><p><img src="https://image.beenli.cn/img/20200820/0PQCr6vCD7Dm.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><center>branch指令需要[15:0]左移两位并符号扩展到32位与PC相加组成新的PC</center><h2 id="3-3、single-data-path"><a href="#3-3、single-data-path" class="headerlink" title="3.3、single data path"></a>3.3、single data path</h2><blockquote><p>假设我们在<code>一个时钟周期</code>内执行任意一条指令。那意味着每条指令不能用某个部件两次或以上。所以任何需要重复的部件都必须被复制。</p><p>1、需要一个指令存储器外，还需要一个数据存储器</p><p>2、尽管有的功能单元需要复制，但在执行不同指令时，很多功能单元可以被共享(复用)</p></blockquote><p><img src="https://image.beenli.cn/img/20200820/v7L4zwoVuOAJ.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><center>复用ALU和寄存器堆</center><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、Preface&quot;&gt;&lt;a href=&quot;#1、Preface&quot; class=&quot;headerlink&quot; title=&quot;1、Preface&quot;&gt;&lt;/a&gt;1、Preface&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;计算机性能：①指令数目(编译器和指令集），②时钟周期长度(组
      
    
    </summary>
    
    
      <category term="CS" scheme="https://www.beenli.cn/categories/CS/"/>
    
      <category term="Computer Organization &amp; Design" scheme="https://www.beenli.cn/categories/CS/Computer-Organization-Design/"/>
    
    
      <category term="processor" scheme="https://www.beenli.cn/tags/processor/"/>
    
  </entry>
  
  <entry>
    <title>存储电路</title>
    <link href="https://www.beenli.cn/posts/19fa4593/"/>
    <id>https://www.beenli.cn/posts/19fa4593/</id>
    <published>2020-08-05T10:28:10.000Z</published>
    <updated>2020-09-30T11:56:14.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><blockquote><p>在复杂的数字电路中，不仅需要对各种数字信号进行<code>算术运算</code>和<code>逻辑运算</code>，而且还需要在运算过程中不断将运算数据和运算结果保存起来。因此，<code>存储电路</code>就成为计算机以及所有复杂数字系统不可缺少的组成部分。</p></blockquote><ul><li><p>分类总结</p><p><img src="http://image.beenli.cn/img/20200806/KInKOkBSpdhF.png?imageslim" srcset="/img/loading.gif" alt="mark"></p></li></ul><h2 id="二、SR锁存器"><a href="#二、SR锁存器" class="headerlink" title="二、SR锁存器"></a>二、SR锁存器</h2><p class="note note-info">SR锁存器(Set-Reset Latch) 是静态存储单元中最基本，也是电路结构最简单的一种。</p><ol><li><p>或门锁存器</p><p><img src="http://image.beenli.cn/img/20200806/mkE1Uu5jsyux.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li>当$R_D$是1或者$S_D$是1而另外一个是0时，可以看到S起到<code>set 1</code>；而R起到<code>reset 0</code>的作用。</li><li>当有一个回到0时(此时两输入都为0)，可以保持原来的状态不变。(因为输出的1反馈到输入)</li><li><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">❌</span>不允许输入同为1。（此时输出同为0为无效状态，并且同时变为0时存在竞争冒险）</li></ul></li><li><p>与门锁存器(同理)<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f642.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f642.png?v8">🙂</span></p><p><img src="http://image.beenli.cn/img/20200806/ny32DamxXGT9.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p></li></ol><h2 id="三、触发器"><a href="#三、触发器" class="headerlink" title="三、触发器"></a>三、触发器</h2><p class="note note-info">触发器与锁存器不同在于：增加了一个触发信号输入端(时钟信号<strong>CLK</strong>)。只有当触发信号到来时，其功能与锁存器相同。</p><h3 id="1、电平触发"><a href="#1、电平触发" class="headerlink" title="1、电平触发"></a>1、电平触发</h3><p class="note note-light">只有触发信号在有效电平的时候，输入信号才能作用。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><h4 id="①同步SR触发器"><a href="#①同步SR触发器" class="headerlink" title="①同步SR触发器"></a>①同步SR触发器</h4><p><img src="http://image.beenli.cn/img/20200806/w2EFARutEXwH.jpg?imageslim" srcset="/img/loading.gif" alt="cl没有⭕代表高电平有效"></p><center>框图<strong>Cl</strong>外面没有⭕代表高电平有效</center><h4 id="②异步复位置位"><a href="#②异步复位置位" class="headerlink" title="②异步复位置位"></a>②异步复位置位</h4><p>// 将<code>置位信号</code>$S_{D}^{‘}$接入G1, <code>复位信号</code>$R_{D}^{‘}$接G2</p><h4 id="③单端输入-D型号锁存器"><a href="#③单端输入-D型号锁存器" class="headerlink" title="③单端输入(D型号锁存器)"></a>③单端输入(D型号锁存器)</h4><p>// 规避了约束条件SR=0</p><p><img src="http://image.beenli.cn/img/20200806/xIOR3Naxv9I6.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><h4 id="④Transparent-D-Latch"><a href="#④Transparent-D-Latch" class="headerlink" title="④Transparent D-Latch"></a>④Transparent D-Latch</h4><p>// CMOS传输门构成</p><p><img src="http://image.beenli.cn/img/20200806/Gs96RXY8qL57.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>当TG2打开，TG1关闭时。两个反相器串联把截止前瞬间的信号(<code>反相器G1输入电容</code>)锁住。</p><h3 id="2、边沿触发"><a href="#2、边沿触发" class="headerlink" title="2、边沿触发"></a>2、边沿触发</h3><p class="note note-light">提高触发器可靠性，增强抗干扰能力，希望触发器次态仅取决于CLK信号<strong>边沿</strong>到达时刻输入信号的状态。而边沿之前或之后输入状态的变化对触发器的次态没有影响。</p><h4 id="①两个电平触发D触发器"><a href="#①两个电平触发D触发器" class="headerlink" title="①两个电平触发D触发器"></a>①两个电平触发D触发器</h4><p><img src="http://image.beenli.cn/img/20200806/XRFiu2qdjwAn.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><ul><li>不看置位信号就是两个Transparent D-Latch</li><li>当第一个工作时，第二个保持。透明D锁存器：所以输出能跟随时钟边沿瞬间输入的值</li></ul><h4 id="②维持阻塞-pushpin"><a href="#②维持阻塞-pushpin" class="headerlink" title="②维持阻塞:pushpin:"></a>②维持阻塞<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8">📌</span></h4><h4 id="③门电路传输延迟-pushpin"><a href="#③门电路传输延迟-pushpin" class="headerlink" title="③门电路传输延迟:pushpin:"></a>③门电路传输延迟<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8">📌</span></h4><h3 id="3、脉冲触发"><a href="#3、脉冲触发" class="headerlink" title="3、脉冲触发"></a>3、脉冲触发</h3><p class="note note-light">为了提高可靠性：希望每个CLK周期里面输出端状态只能改变<strong>一次</strong></p><h4 id="①主从SR"><a href="#①主从SR" class="headerlink" title="①主从SR"></a>①主从SR</h4><p>Master-Slave SR Flip-Flop</p><p><img src="http://image.beenli.cn/img/20200812/sT6pd0FRytWY.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><center><strong>￢</strong>：延时输出</center><p><img src="http://image.beenli.cn/img/20200812/Gj3SXcH9aMF3.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><center>高电平有效，下降沿状态才会改变</center><ul><li>clk高电平<code>主触发器</code>有效，<code>从触发器</code>保持原来状态。</li><li>clk从高变到低时，主触发器被封锁，从触发器按照主触发器相同的状态翻转。</li><li>因此：一个周期输出只可能翻转一次。</li></ul><h4 id="②主从JK-规避SR-1"><a href="#②主从JK-规避SR-1" class="headerlink" title="②主从JK(规避SR=1)"></a>②主从JK(<code>规避SR=1</code>)</h4><p><img src="http://image.beenli.cn/img/20200812/3w2tYTQ9HhKm.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><script type="math/tex;mode=display">Q^* = S + \overline RQ(for\quad SR)</script><script type="math/tex;mode=display">JK: S=J \overline Q\quad R=KQ</script><script type="math/tex;mode=display">Q^*=J \overline Q+(\overline K+\overline Q)Q=J \overline Q + \overline KQ\quad(for\quad JK)</script><ul><li>clk变低电平时把主触发器的值<code>复制</code>给了次触发器。（所以上边推导时Q即代表中间输出也代表后边输出）</li><li>主触发器有效时(高电平)Q要么为1要么为0，不可能同时为0或者为1。因为G3,G4都为1。它们通过反相器互咬。</li><li>考察当J=1，R=1时，G7,G8输出$Q$和$\overline Q$(不是全0，就🆗)。所以当Q=1，输出为0，当Q=0,输出为1,即反向。</li></ul><h2 id="四、触发器的动态特性-pushpin"><a href="#四、触发器的动态特性-pushpin" class="headerlink" title="四、触发器的动态特性:pushpin:"></a>四、触发器的动态特性<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8">📌</span></h2><h2 id="五、References"><a href="#五、References" class="headerlink" title="五、References"></a>五、References</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">外国教材有时把此电路叫（Gated SR latch), 时钟信号叫做“使能”信号（enable）</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;在复杂的数字电路中，不仅需要对各种数字信号进行&lt;code&gt;算术运算&lt;/code&gt;和&lt;code&gt;逻辑运
      
    
    </summary>
    
    
      <category term="Digital IC" scheme="https://www.beenli.cn/categories/Digital-IC/"/>
    
      <category term="digital electronic technique" scheme="https://www.beenli.cn/categories/Digital-IC/digital-electronic-technique/"/>
    
    
      <category term="circuits" scheme="https://www.beenli.cn/tags/circuits/"/>
    
  </entry>
  
  <entry>
    <title>riscv-gnu-toolchain 下载、编译</title>
    <link href="https://www.beenli.cn/posts/6c0abcd9/"/>
    <id>https://www.beenli.cn/posts/6c0abcd9/</id>
    <published>2020-08-01T01:23:29.000Z</published>
    <updated>2020-09-30T12:18:58.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p><a href="https://hub.fastgit.org/riscv/riscv-gnu-toolchain" rel="external nofollow noreferrer">riscv-gnu-toolchain</a> 是学习 <code>risc-v</code> 的前提，但是网上对这方面的介绍很少，并且工具链种类繁多，很可能让我们摸不清头脑。</p><h2 id="2、下载篇"><a href="#2、下载篇" class="headerlink" title="2、下载篇"></a>2、下载篇</h2><blockquote><p>由于<code>riscv-gnu-toolchain</code>包含有好多第三方库，整个项目文件很大[官方说的是6.65GB]，加上国内GitHub堪比🐢速，你多半是不可能按官方教程下下来。</p></blockquote><div class="table-container"><table><thead><tr><th>项目名称</th><th>项目描述</th><th>项目用途</th></tr></thead><tbody><tr><td><a href="https://git.qemu.org/git/qemu.git" rel="external nofollow noreferrer">qemu</a></td><td>模拟器（类似bochs,PearPC)</td><td></td></tr><tr><td><a href="https://hub.fastgit.org/riscv/riscv-binutils-gdb.git" rel="external nofollow noreferrer">riscv-binutils</a></td><td>开发工具(compiler、assemble、linker、debugger…)</td><td></td></tr><tr><td><a href="https://hub.fastgit.org/riscv/riscv-dejagnu.git" rel="external nofollow noreferrer">riscv-dejagnu</a></td><td>测试其它程序的框架(framework)</td><td></td></tr><tr><td><a href="https://hub.fastgit.org/riscv/riscv-gcc.git" rel="external nofollow noreferrer">riscv-gcc</a></td><td>GNU Compiler Collection</td><td></td></tr><tr><td><a href="https://hub.fastgit.org/riscv/riscv-binutils-gdb.git" rel="external nofollow noreferrer">riscv-gdb</a></td><td>同riscv-binutils</td><td></td></tr><tr><td><a href="https://hub.fastgit.org/riscv/riscv-glibc" rel="external nofollow noreferrer">riscv-glibc</a></td><td>GNU C Library(system-API,其它的语言也通过它访问OS)</td><td></td></tr><tr><td><a href="https://hub.fastgit.org/riscv/riscv-newlib.git" rel="external nofollow noreferrer">riscv-newlib</a></td><td>一套开发工具（用的库有别于riscv-binutils)</td></tr></tbody></table></div><blockquote><p>binutils 和 newlib 之间的区别（坑待填o_o ….）</p></blockquote><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p>PC: x86</p><p>OS: Ubuntu 20.04.1 LTS</p><p>VM: wmware15.5Pro</p><hr><ol><li><p>下载源代码（推荐使用<code>hub.fastgit.org</code>镜像站，比原生站快几百倍）</p><pre><code class="hljs jboss-cli">git clone https:<span class="hljs-string">//hub.fastgit.org/riscv/riscv-gnu-toolchain</span><span class="hljs-keyword">cd</span> riscv-gnu-toolchaingit submodule update <span class="hljs-params">--init</span> <span class="hljs-params">--recursive</span></code></pre></li><li><p>安装依赖（其它系统查看官方readme)</p><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> install autoconf automake autotools-<span class="hljs-built_in">dev</span> curl python3 libmpc-<span class="hljs-built_in">dev</span> libmpfr-<span class="hljs-built_in">dev</span> libgmp-<span class="hljs-built_in">dev</span> gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-<span class="hljs-built_in">dev</span> libexpat-<span class="hljs-built_in">dev</span></code></pre></li></ol><h3 id="下载失败解决方案"><a href="#下载失败解决方案" class="headerlink" title="下载失败解决方案"></a>下载失败解决方案</h3><ol><li><p>git clone qemu下载速度太慢导致失败（因为qemu没有把项目托管在GitHub上)</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1xGrafiu4I0yPAnE0iuTYzw" rel="external nofollow noreferrer">https://pan.baidu.com/s/1xGrafiu4I0yPAnE0iuTYzw</a><br>提取码：3iyy</p></blockquote><p>下载源码, 解压到相应的目录上即可。</p></li><li><p>其它模块没有拉下来。</p><p>在源项目下挨个手动克隆。</p><pre><code class="hljs awk">cd ~<span class="hljs-regexp">/riscv/</span>riscv-gnu-toolchaingit clone https:<span class="hljs-regexp">//</span>hub.fastgit.org<span class="hljs-regexp">/riscv/</span>riscv-gcc.git</code></pre></li></ol><h2 id="3、编译篇"><a href="#3、编译篇" class="headerlink" title="3、编译篇"></a>3、编译篇</h2><h3 id="1、Newlib"><a href="#1、Newlib" class="headerlink" title="1、Newlib"></a>1、Newlib</h3><ul><li><p>建立一个安装路径：makdir /opt/riscv</p></li><li><p>[最好建立一个编译文件夹]：makdir build &amp;&amp; cd build</p></li><li><p>配置环境变量：export PATH=$PATH:/opt/riscv/bin(建议写到~/.bashrc上，永久有效</p><pre><code class="hljs jboss-cli"><span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=/opt/riscv</span>make</code></pre></li></ul><h3 id="2、Linux"><a href="#2、Linux" class="headerlink" title="2、Linux"></a>2、Linux</h3><ul><li>跟上面相同的步骤，不过最好换一个干净的文件夹。</li></ul><ul><li><p>默认是安装RV64GC(64-bit), 即使在32-bit的构建环境中。</p><pre><code class="hljs jboss-cli"><span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=/opt/riscv</span>make linux</code></pre></li></ul><ul><li><p>Alternatively：（构建32-bit RV32GC)</p><pre><code class="hljs routeros">./configure <span class="hljs-attribute">--prefix</span>=/opt/riscv <span class="hljs-attribute">--with-arch</span>=rv32gc <span class="hljs-attribute">--with-abi</span>=ilp32dmake linux</code></pre></li><li><p>支持的架构有：rv32i、rv64i</p></li><li>标准扩展： (a)tomics, (m)ultiplication and division, (f)loat, (d)ouble, or (g)eneral for MAFD</li><li>支持的ABIs: ilp32 (32-bit soft-float), ilp32d (32-bit hard-float), ilp32f (32-bit with single-precision in registers and double in memory, niche use only), lp64 lp64f lp64d (same but with 64-bit long and pointers).</li></ul><h3 id="3、Linux-multilib"><a href="#3、Linux-multilib" class="headerlink" title="3、Linux multilib"></a>3、Linux multilib</h3><ul><li><p>同时支持32-bit和64-bit的Linux。</p><pre><code class="hljs jboss-cli"><span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=/opt/riscv</span> <span class="hljs-params">--enable-multilib</span>make linux</code></pre><blockquote><p>编译出来的工具带有前缀：<code>riscv64-unknown-linux-gnu-</code>, 但是能编译32位和64位程序。</p></blockquote></li></ul><h2 id="4、编译结果"><a href="#4、编译结果" class="headerlink" title="4、编译结果"></a>4、编译结果</h2><blockquote><p>经过漫长的等待，我终于编译Linux 64bit版本。</p></blockquote><p><img src="http://image.beenli.cn/img/20200801/kPGRS3PNVC3f.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><p><img src="http://image.beenli.cn/img/20200801/BoO9SyR2SFa9.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://blog.csdn.net/weiqi7777/article/details/88045720?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.channel_param" rel="external nofollow noreferrer">riscv各种版本gcc工具链编译与安装</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、前言&quot;&gt;&lt;a href=&quot;#1、前言&quot; class=&quot;headerlink&quot; title=&quot;1、前言&quot;&gt;&lt;/a&gt;1、前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hub.fastgit.org/riscv/riscv-gnu-toolchain&quot; re
      
    
    </summary>
    
    
      <category term="RISC-V" scheme="https://www.beenli.cn/categories/RISC-V/"/>
    
      <category term="environment" scheme="https://www.beenli.cn/categories/RISC-V/environment/"/>
    
    
      <category term="toolkits" scheme="https://www.beenli.cn/tags/toolkits/"/>
    
  </entry>
  
  <entry>
    <title>jupyter notebook</title>
    <link href="https://www.beenli.cn/posts/2641cf45/"/>
    <id>https://www.beenli.cn/posts/2641cf45/</id>
    <published>2020-07-23T07:13:27.000Z</published>
    <updated>2020-09-30T12:21:08.467Z</updated>
    
    <content type="html"><![CDATA[<center>jupyter notebook</center><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><ul><li>安装python</li><li>安装pip</li><li>（安装ipython）</li><li>安装jupyter notebook(pip install jupyter notebook)</li></ul><h3 id="2、jupyter命令"><a href="#2、jupyter命令" class="headerlink" title="2、jupyter命令"></a>2、jupyter命令</h3><ul><li><p>查看已经安装的核</p><pre><code class="hljs taggerscript">jupyter kernelspec list Available kernels:  py38       C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\w</span>anli<span class="hljs-symbol">\A</span>ppData<span class="hljs-symbol">\R</span>oaming<span class="hljs-symbol">\j</span>upyter<span class="hljs-symbol">\k</span>ernels<span class="hljs-symbol">\p</span>y38  python3    C:<span class="hljs-symbol">\P</span>rogramData<span class="hljs-symbol">\j</span>upyter<span class="hljs-symbol">\k</span>ernels<span class="hljs-symbol">\p</span>ython3</code></pre></li><li><p>移除已经安装的核</p><pre><code class="hljs routeros">jupyter kernelspec <span class="hljs-builtin-name">remove</span> [kernelname]</code></pre></li><li><p>安装核</p><pre><code class="hljs brainfuck"><span class="hljs-comment">python</span> <span class="hljs-literal">-</span><span class="hljs-comment">m</span> <span class="hljs-comment">ipykernel</span> <span class="hljs-comment">install</span> <span class="hljs-title">[</span>--<span class="hljs-comment">user</span><span class="hljs-title">]</span> --<span class="hljs-comment">name</span> <span class="hljs-title">[</span><span class="hljs-comment">kernelname</span><span class="hljs-title">]</span></code></pre></li></ul><h3 id="3、conda创建虚拟环境"><a href="#3、conda创建虚拟环境" class="headerlink" title="3、conda创建虚拟环境"></a>3、conda创建虚拟环境</h3><ul><li><p>查看已经有的环境</p><pre><code class="hljs taggerscript">$ conda env list# conda environments:#base                  *  D:<span class="hljs-symbol">\A</span>PP<span class="hljs-symbol">\m</span>inicondapy38                     D:<span class="hljs-symbol">\A</span>PP<span class="hljs-symbol">\m</span>iniconda<span class="hljs-symbol">\e</span>nvs<span class="hljs-symbol">\p</span>y38</code></pre></li><li><p>安装新的环境</p><pre><code class="hljs routeros">conda create -n py36 <span class="hljs-attribute">python</span>=3.6</code></pre></li><li><p>激活环境/推出环境</p><pre><code class="hljs maxima">conda <span class="hljs-built_in">activate</span> envnameconda <span class="hljs-built_in">deactivate</span></code></pre></li></ul><h3 id="4、遇到的问题"><a href="#4、遇到的问题" class="headerlink" title="4、遇到的问题"></a>4、遇到的问题</h3><ol><li><p>jupyter ImportError: DLL load failed: 找不到指定的程序。(kernel error)</p><ul><li><p>where jupyter</p><p>我发现我有两个jupyter, 两个python</p></li><li><p>试过了网上好多办法都不管用(大多叫你添加环境变量)</p></li><li><p>最终我把其中一个jupyter(有问题的)卸载了，用另外一个就好了。</p></li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;jupyter notebook&lt;/center&gt;&lt;h3 id=&quot;1、安装&quot;&gt;&lt;a href=&quot;#1、安装&quot; class=&quot;headerlink&quot; title=&quot;1、安装&quot;&gt;&lt;/a&gt;1、安装&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;安装python&lt;/li&gt;&lt;li&gt;安装pip&lt;/
      
    
    </summary>
    
    
      <category term="Software" scheme="https://www.beenli.cn/categories/Software/"/>
    
      <category term="jupyter" scheme="https://www.beenli.cn/categories/Software/jupyter/"/>
    
    
      <category term="toolkits" scheme="https://www.beenli.cn/tags/toolkits/"/>
    
  </entry>
  
  <entry>
    <title>超前进位加法器</title>
    <link href="https://www.beenli.cn/posts/1aa82b80/"/>
    <id>https://www.beenli.cn/posts/1aa82b80/</id>
    <published>2020-04-28T09:31:08.000Z</published>
    <updated>2020-09-30T12:02:22.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、1bit全加器"><a href="#1、1bit全加器" class="headerlink" title="1、1bit全加器"></a>1、1bit全加器</h2><script type="math/tex;mode=display">S = A\oplus B \oplus C_{in}</script><script type="math/tex;mode=display">C_{out} = AB + (A \oplus B)C_{in}</script><p><img src="http://image.beenli.cn/img/20200428/N0IQvruhWdNO.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><h2 id="2、4bit行波加法器"><a href="#2、4bit行波加法器" class="headerlink" title="2、4bit行波加法器"></a>2、4bit行波加法器</h2><p><img src="http://image.beenli.cn/img/20200428/MPLTV6H2PHyh.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><blockquote><p>可以看到要得到最后的进位要经过9个门的延时。</p></blockquote><h2 id="3、4bit超前进位加法器"><a href="#3、4bit超前进位加法器" class="headerlink" title="3、4bit超前进位加法器"></a>3、4bit超前进位加法器</h2><script type="math/tex;mode=display">进位产生信号:g_i = A_iB_i</script><script type="math/tex;mode=display">进位传输信号:p_i = A_i\oplus B_i</script><script type="math/tex;mode=display">则：S_i = p_i \oplus c_i</script><script type="math/tex;mode=display">C_{i+1} = p_ic_i + g_i\quad(c_o = c_{in})</script><p class="note note-primary">判断进位的步骤:</p><ol><li>如果 $g_i$=1 (其他不用看肯定会进位)</li><li>如果 $g_i$=0；看传输信号$p_i$。</li><li>如果 $p_i$=0; 那不用看，已经否决了进位</li><li>如果 $p_i$=1; 那么用同样的方法看下一位是否有进位</li></ol><p></p><p class="note note-primary">判断结果的步骤: 只需把传输信号与进位信号异或。</p><p><img src="http://image.beenli.cn/img/20200428/Lih1DmjLOgFB.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>化简得到：</p><script type="math/tex;mode=display">c_1 = g_0 + p_oc_0(3个门延时)</script><script type="math/tex;mode=display">c_2 = g_1 + g_0p_1 + p_1p_0c_0(3个门延时)</script><script type="math/tex;mode=display">c_3 = g_2 + p_2g_1 + p_2p_1g_0 + p_2p_1p_0c_0(3个延时)</script><script type="math/tex;mode=display">c_4 = g_3 + p_3g_2 + p_3p_2g_1 + p_3p_2p_1g_0 + p_3p_2p_1p_0c_0</script><blockquote><p>👇下面是经过综合器优化门个数后的图。可以明显看到虽然门个数减少但是延时变长。</p></blockquote><p><img src="http://image.beenli.cn/img/20200428/abseSUENAM06.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><h2 id="4、超前进位加法器级联"><a href="#4、超前进位加法器级联" class="headerlink" title="4、超前进位加法器级联"></a>4、超前进位加法器级联</h2><script type="math/tex;mode=display">pp = p[0] \& p[1] \& p[2] \& p[3](传输信号)</script><script type="math/tex;mode=display">gg = c_4(进位信号)</script><p><code>pp</code>： 代表相加结果为1111的时候。那么低一级要是有进位，传到我这一级，会产生想上一级的进位。</p><pre><code class="hljs verilog"><span class="hljs-comment">// Author: Wan Li</span><span class="hljs-comment">// time: 2020-04-28</span><span class="hljs-comment">// function: 把4个超前进位组成16位的</span><span class="hljs-comment">// ---------------------------------------------------</span><span class="hljs-comment">/* `include "adder4.v" */</span><span class="hljs-keyword">module</span> adder_16(a, b, c_in, sum, c_out);    <span class="hljs-keyword">input</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] a, b;    <span class="hljs-keyword">input</span> c_in;    <span class="hljs-keyword">output</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] sum;    <span class="hljs-keyword">output</span> c_out;    <span class="hljs-keyword">wire</span>[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] p, g, c;    <span class="hljs-keyword">assign</span> c[<span class="hljs-number">0</span>] = c_in;    add4_head add1(<span class="hljs-variable">.a</span>(a[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]),   <span class="hljs-variable">.b</span>(b[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]),   <span class="hljs-variable">.ci</span>(c[<span class="hljs-number">0</span>]), <span class="hljs-variable">.s</span>(sum[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]), <span class="hljs-variable">.pp</span>(p[<span class="hljs-number">0</span>]), <span class="hljs-variable">.gg</span>(g[<span class="hljs-number">0</span>]));    <span class="hljs-keyword">assign</span> c[<span class="hljs-number">1</span>] = g[<span class="hljs-number">0</span>] | (p[<span class="hljs-number">0</span>] &amp; c[<span class="hljs-number">0</span>]);    add4_head add2(<span class="hljs-variable">.a</span>(a[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>]),   <span class="hljs-variable">.b</span>(b[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>]),   <span class="hljs-variable">.ci</span>(c[<span class="hljs-number">1</span>]), <span class="hljs-variable">.s</span>(sum[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>]), <span class="hljs-variable">.pp</span>(p[<span class="hljs-number">1</span>]), <span class="hljs-variable">.gg</span>(g[<span class="hljs-number">1</span>]));    <span class="hljs-keyword">assign</span> c[<span class="hljs-number">2</span>] = g[<span class="hljs-number">1</span>] | (p[<span class="hljs-number">1</span>] &amp; c[<span class="hljs-number">1</span>]);    add4_head add3(<span class="hljs-variable">.a</span>(a[<span class="hljs-number">11</span>:<span class="hljs-number">8</span>]),  <span class="hljs-variable">.b</span>(b[<span class="hljs-number">11</span>:<span class="hljs-number">8</span>]),  <span class="hljs-variable">.ci</span>(c[<span class="hljs-number">2</span>]), <span class="hljs-variable">.s</span>(sum[<span class="hljs-number">11</span>:<span class="hljs-number">8</span>]), <span class="hljs-variable">.pp</span>(p[<span class="hljs-number">2</span>]), <span class="hljs-variable">.gg</span>(g[<span class="hljs-number">2</span>]));    <span class="hljs-keyword">assign</span> c[<span class="hljs-number">3</span>] = g[<span class="hljs-number">2</span>] | (p[<span class="hljs-number">2</span>] &amp; c[<span class="hljs-number">2</span>]);    add4_head add4(<span class="hljs-variable">.a</span>(a[<span class="hljs-number">15</span>:<span class="hljs-number">12</span>]), <span class="hljs-variable">.b</span>(b[<span class="hljs-number">15</span>:<span class="hljs-number">12</span>]), <span class="hljs-variable">.ci</span>(c[<span class="hljs-number">3</span>]), <span class="hljs-variable">.s</span>(sum[<span class="hljs-number">15</span>:<span class="hljs-number">12</span>]), <span class="hljs-variable">.pp</span>(p[<span class="hljs-number">3</span>]), <span class="hljs-variable">.gg</span>(g[<span class="hljs-number">3</span>]));    <span class="hljs-keyword">assign</span> c_out = g[<span class="hljs-number">3</span>] | (p[<span class="hljs-number">3</span>] &amp; c[<span class="hljs-number">3</span>]);<span class="hljs-keyword">endmodule</span></code></pre><p><img src="http://image.beenli.cn/img/20200428/REkvohU89K88.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、1bit全加器&quot;&gt;&lt;a href=&quot;#1、1bit全加器&quot; class=&quot;headerlink&quot; title=&quot;1、1bit全加器&quot;&gt;&lt;/a&gt;1、1bit全加器&lt;/h2&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;S = A\op
      
    
    </summary>
    
    
      <category term="Digital IC" scheme="https://www.beenli.cn/categories/Digital-IC/"/>
    
      <category term="verilog" scheme="https://www.beenli.cn/categories/Digital-IC/verilog/"/>
    
    
      <category term="circuits" scheme="https://www.beenli.cn/tags/circuits/"/>
    
  </entry>
  
  <entry>
    <title>Git for novice</title>
    <link href="https://www.beenli.cn/posts/f05478c5/"/>
    <id>https://www.beenli.cn/posts/f05478c5/</id>
    <published>2020-04-27T10:09:18.000Z</published>
    <updated>2020-08-05T09:57:24.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Git-and-GitHub"><a href="#1、Git-and-GitHub" class="headerlink" title="1、Git and GitHub"></a>1、Git and GitHub</h2><p><code>Github</code> 可以看成是一个基于Git的系统，它提供了仓库的可视化。是一个<code>远程托管仓库</code>。如果是public，其他人可以随意查看，修改。如果是private只有你自己可以查看了。如果为了安全，可以团队自己搭建一个git服务器。</p><p><code>Git</code>大家都已经很熟悉了，分布式版本控制系统(Distributed version control system)</p><h2 id="2、Why-do-we-use-git"><a href="#2、Why-do-we-use-git" class="headerlink" title="2、Why do we use git"></a>2、Why do we use git</h2><ol><li>可以更好地在GitHub上开发，分享啊。</li><li>多人协同开发。</li><li>版本控制，可以任意回滚到之前某个版本。</li></ol><h2 id="3、How-do-we-use-git"><a href="#3、How-do-we-use-git" class="headerlink" title="3、How do we use git"></a>3、How do we use git</h2><p><img src="http://image.beenli.cn/img/20200428/AdQsxqK9vslE.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h3><blockquote><p>在GitHub上看到一个不错的项目，想要研究，学习为目的。</p></blockquote><ol><li><p>先fork一份到自己的GitHub上。</p></li><li><p>clone到本地</p><p>-o 指定远程仓库的名字，否则默认为<code>origin</code></p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> [-b &lt;指定分支名&gt;]&lt;远程仓库地址&gt; [-o booyah]  默认是克隆所有分支。</code></pre></li><li><p>进行自己的开发。修改文件后</p><p>此时git status可以看到：修改过的文件红色标处。<code>Untracked files</code><img src="http://image.beenli.cn/img/20200427/3yURcSj2qBqU.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><pre><code class="hljs bash">git add ./[filename]// 把修改过的文件添加到暂存区。</code></pre><p><img src="http://image.beenli.cn/img/20200427/ri8cAxnmujYg.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>此时文件变成绿色。即已经添加到了暂存区。</p></li><li><p>提交</p><pre><code class="hljs bash">git commit -m <span class="hljs-string">"添加文件的说明"</span>// 提交</code></pre><p>提交完成了，工作目录应该显示是空的。</p></li><li><p>推送到远程仓库</p><pre><code class="hljs bash">git pull origin [branch name] // 推送到指定仓库的指定分支上。</code></pre><p><img src="http://image.beenli.cn/img/20200427/aTKLfLxC1XUc.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p></li></ol><h3 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h3><blockquote><p>自己新建一个仓库。做项目开发。</p></blockquote><ol><li><p>初始化一个本地仓库</p><pre><code class="hljs bash">git init xxx// 新建一个名为xxx的仓库</code></pre></li><li><p>进入仓库，然后就可以开发了。</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span>  xxx // 此目录就是工程根目录。</code></pre></li><li><p>如果要上传到GitHub上。即远端git服务器</p><ul><li><p>首先在GitHub上新建一个仓库。</p></li><li><p>本地仓库与远程仓库建立联系。</p><pre><code class="hljs axapta">git remote add origin &lt;<span class="hljs-keyword">server</span>&gt;<span class="hljs-comment">// 与GitHub仓库建立联系. origin 可以换成任意名字。</span></code></pre><p><img src="http://image.beenli.cn/img/20200427/9id7SRqNtn2j.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><blockquote><p>可以看到我通过origin pull不上去。因为我连接的是remote_name。</p></blockquote></li><li><p>push到远程服务器上</p><pre><code class="hljs bash">git push origin master // 推送到远程服务器上</code></pre></li></ul><p>如果是克隆远程仓库的话，那么可以跳过remote（因为本地master已经和远程master联系上了)。直接推送到远程服务器。</p></li></ol><h2 id="4、common-commands1"><a href="#4、common-commands1" class="headerlink" title="4、common commands1"></a>4、common commands<a href="#link"><sup>1</sup></a></h2><h3 id="1、branch（分支"><a href="#1、branch（分支" class="headerlink" title="1、branch（分支)"></a>1、branch（分支)</h3><h4 id="1、新建分支"><a href="#1、新建分支" class="headerlink" title="1、新建分支"></a>1、新建分支</h4><pre><code class="hljs bash">git checkout -b xxx// 新建分支并切换到xxxgit branch xxx// 只是新建一个分支，仍留在本地。（新建的分支复刻目分支)</code></pre><blockquote><p>git branch [-b branchName commitId] 从指定分支和commit号上开始新的分支</p></blockquote><h4 id="2、分支切换"><a href="#2、分支切换" class="headerlink" title="2、分支切换"></a>2、分支切换</h4><pre><code class="hljs bash">git branch [-a]//查看分支git checkout xxx//切换到xxx分支</code></pre><blockquote><p>git branch 参数-a: 查看所有分支，包括远端的分支。 -v 查看分支指向的commit。 —remote查看远程分支</p></blockquote><h4 id="3、合并分支"><a href="#3、合并分支" class="headerlink" title="3、合并分支"></a>3、合并分支</h4><ol><li><p>先把你次要分支提交完全。</p></li><li><p>切换到你要合并其他分支的主分支上</p></li><li><p>合并</p><pre><code class="hljs bash">git merge <span class="hljs-built_in">test</span>// 在主分支上合并<span class="hljs-built_in">test</span>分支</code></pre><p><img src="http://image.beenli.cn/img/20200427/GXOtI8DdGor8.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p></li></ol><blockquote><p>可以看到已经合并了test1分支。现在它们指向同一个commit。</p><p>如果遇到冲突，手动判断哪一个修改留下。</p></blockquote><h4 id="4、删除分支"><a href="#4、删除分支" class="headerlink" title="4、删除分支"></a>4、删除分支</h4><pre><code class="hljs bash">git branch -d [branch name]git push origin --delete [branch name]  // 删除远程分支$ git push origin --delete testingTo github.com:BeenLi/learn_git.git - [deleted]         testing</code></pre><h4 id="5、远程分支"><a href="#5、远程分支" class="headerlink" title="5、远程分支"></a>5、远程分支</h4><pre><code class="hljs bash">$ git ls-remote// 查看远程分支From git@github.com:BeenLi/learn_git.git6fc7758ee27a73196a81391efd803dc19541eb88        HEAD6fc7758ee27a73196a81391efd803dc19541eb88        refs/heads/master807b956e7a57eef2f148dc7cb5b14ae3992955e6        refs/heads/testing807b956e7a57eef2f148dc7cb5b14ae3992955e6        refs/pull/1/head998239f25772ea809310d9f92c9e96a67c158b82        refs/pull/1/merge$ git remote show// 查看远程仓库名字remote_name</code></pre><blockquote><p>“origin” 是当你运行 git clone 时默认的远程仓库名字</p></blockquote><h4 id="6、跟踪分支"><a href="#6、跟踪分支" class="headerlink" title="6、跟踪分支"></a>6、跟踪分支</h4><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b </span>[<span class="hljs-keyword">branch] </span>[remotename]/[<span class="hljs-keyword">branch]</span><span class="hljs-keyword"></span><span class="hljs-keyword">git </span>checkout --track origin/serverfix// 快捷命令当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支<span class="hljs-symbol">git</span> <span class="hljs-keyword">branch </span>--set-upstream-to origin/remoteBranchName localBranchName 修改远程分支<span class="hljs-symbol">git</span> <span class="hljs-keyword">branch </span>--unset-upstream// 撤销跟踪远程分支</code></pre><p><img src="http://image.beenli.cn/img/20200428/4tSisNi0opQ7.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><blockquote><p>可以看到 设置了分支test3 跟踪 远端的master分支。现在分支与master分支相同。</p><p>现在，本地分支 test 会自动从 remote_name/master 拉取。</p></blockquote><pre><code class="hljs angelscript">$ git branch -vv  master <span class="hljs-number">2</span>b2be16 修改文件，制造合并冲突  test1  <span class="hljs-number">2</span>b2be16 修改文件，制造合并冲突  test2  <span class="hljs-number">420f</span>721 第二次本地提交  testing e051a6f [remote_name/testing: ahead <span class="hljs-number">1</span>] 测试追踪分支情况* test3  <span class="hljs-number">4f</span>db7bd [remote_name/master] 测试本地提交可以看到test3 是master的跟踪分支。testing分支领先<span class="hljs-number">1</span>。表示有本地有一个commit没有push到服务器上。</code></pre><h4 id="7、分支拉取"><a href="#7、分支拉取" class="headerlink" title="7、分支拉取"></a>7、分支拉取</h4><pre><code class="hljs bash">git pull  == git fetch + git mergegit fetch 不会修改当前工作区的文件。它只会获取数据然后让你自己合并。</code></pre><h4 id="8、上传分支"><a href="#8、上传分支" class="headerlink" title="8、上传分支"></a>8、上传分支</h4><pre><code class="hljs bash">git push origin localbranch:remotebranch如果添加了远程分支就直接push了。</code></pre><h3 id="2、reset-撤销"><a href="#2、reset-撤销" class="headerlink" title="2、reset (撤销)"></a>2、reset (撤销)</h3><p><a href="#link">参考🔗</a></p><p><img src="http://image.beenli.cn/img/20200428/CUvCyfwWR8h9.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><h4 id="1、reset-—hard"><a href="#1、reset-—hard" class="headerlink" title="1、reset —hard"></a>1、reset —hard</h4><p>reset —hard：重置stage区和工作目录(会在重置 <strong>HEAD</strong> 和<strong>branch</strong>的同时，重置stage区和工作目录里的内容)</p><p>即回到上一次commit的位置。，全部清空。</p><h4 id="2、reset-—soft"><a href="#2、reset-—soft" class="headerlink" title="2、reset —soft"></a>2、reset —soft</h4><p>reset —soft：保留工作目录和暂存区中的内容，并把重置 HEAD 所带来的新的差异放进暂存区</p><p>即你之前commit的文件，退回到<code>stage</code>。需要重新提交。</p><h4 id="3、reset-—mixed"><a href="#3、reset-—mixed" class="headerlink" title="3、reset [—mixed]"></a>3、reset [—mixed]</h4><p>reset: 保留工作目录，并清空暂存区</p><p>也就是你要重新add，然后commit。</p><div id="link"></div><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://blog.csdn.net/qq_15037231/article/details/79137753" rel="external nofollow noreferrer">分支用法</a></p><p>[2] <a href="https://www.jianshu.com/p/c2ec5f06cf1a" rel="external nofollow noreferrer">reset用法</a></p><p>[3] <a href="https://www.runoob.com/manual/git-guide/" rel="external nofollow noreferrer">简明教程</a></p><p>[4] <a href="https://baijiahao.baidu.com/s?id=1664197276209808372&amp;wfr=spider&amp;for=pc" rel="external nofollow noreferrer">动态过程</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、Git-and-GitHub&quot;&gt;&lt;a href=&quot;#1、Git-and-GitHub&quot; class=&quot;headerlink&quot; title=&quot;1、Git and GitHub&quot;&gt;&lt;/a&gt;1、Git and GitHub&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Github&lt;/
      
    
    </summary>
    
    
      <category term="Software" scheme="https://www.beenli.cn/categories/Software/"/>
    
      <category term="Git" scheme="https://www.beenli.cn/categories/Software/Git/"/>
    
    
      <category term="git" scheme="https://www.beenli.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——树</title>
    <link href="https://www.beenli.cn/posts/f796a091/"/>
    <id>https://www.beenli.cn/posts/f796a091/</id>
    <published>2020-04-09T05:43:31.000Z</published>
    <updated>2020-08-22T07:22:18.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、树的相关术语"><a href="#1、树的相关术语" class="headerlink" title="1、树的相关术语"></a>1、树的相关术语</h2><ol><li><p><strong>度</strong>：一个结点的子结点数目。树的度指度数最大的那个结点的度</p><script type="math/tex;mode=display">TD = max_{i=1...n}D(i)\quad D(i)表示第i个结点的度</script></li><li><p><strong>叶结点，分支结点</strong></p><p>度为0的结点——<code>叶结点</code>；度大于0的结点——<code>分支结点</code></p></li><li><p><strong>结点的层数</strong></p><p>(1) root(T)——层数为0</p><p>(2)其余结点层数为前驱结点层数 + 1</p></li><li><p><strong>路径</strong></p><script type="math/tex;mode=display">V_m——>V_{m+1}——>...——>V_{m+k} \quad1 <= k <= T最大层数</script><p>同时满足$V_{i+1} $是$V_i$ （m &lt;=i&lt;=m+k-1)的子结点,则称结点序列为$V_m$ 到 $V_{m+1}$ 的路径。该路径经历的边数<code>k</code>称为<code>路径长度</code></p></li><li><p><strong>子孙结点、祖先结点</strong></p><p>一棵树中若存在结点$V_m$ 到$V_n$的路径，则称为$V_n$是$V_m$的<code>子孙结点</code>,为$V_n$是$V_m$的<code>祖先结点</code>。</p></li><li><p><strong>树的高度</strong></p><p>树中结点的最大层数。</p></li></ol><h2 id="2、二叉树引理"><a href="#2、二叉树引理" class="headerlink" title="2、二叉树引理"></a>2、二叉树引理</h2><ol><li><p><strong>设T为n个结点构成的二叉树，其中叶子节点个数为n~0~，度为2的结点个数为n~2~,则有:</strong></p><script type="math/tex;mode=display">n_0 = n_2 +1</script><p>证明：</p><script type="math/tex;mode=display">设总的边数为e,度为1的结点树n_1\\</script><script type="math/tex;mode=display">则:n = n_0 + n_1 + n_2\\</script><script type="math/tex;mode=display">e = n - 1(除了根没有父节点没算在内)\\</script><script type="math/tex;mode=display">e = 2n_2 + n_1\\</script><script type="math/tex;mode=display">则有：2n_2 + n_1 = n_0 + n_1 + n_2 - 1\\</script></li></ol><ol><li><p><code>满二叉树</code>和<code>完全二叉树</code></p><p>满二叉树：每一层都充满了结点，一颗非空高度为k的满二叉树，有$2^{k+1}+1$个结点。</p><p>完全二叉树：只有最后一层不满，其余层全是满的。且最后一层从最左边开始填充。</p><p><img src="http://image.beenli.cn/img/20200410/HISXRvqtBFGy.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p></li><li><p><strong>若将n个结点的完全二叉树按<code>层次顺序</code>从1开始编号，则对编号为i(1 &lt;= i &lt;= n)的结点</strong>有：</p><ol><li>若 i $\neq$ = 1,则编号为i的结点父节点编号为$\left \lfloor i/2 \right \rfloor$</li><li>若 2i $\leq$ n, 则编号为i的结点左孩子编号为2i,否则无左孩子</li><li>若 2i+1 $\leq$ n, 则编号为i的右孩子编号为2i + 1,否者无有孩子。</li><li><code>推论</code>：一棵具有n个结点的完全二叉树，分支结点个数为$\left \lfloor n/2 \right \rfloor$。(最后一个结点n的父节点为$\left \lfloor n/2 \right \rfloor$)</li></ol><p><img src="http://image.beenli.cn/img/20200410/5LKoRUbNYOH0.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p></li><li><p>具有n个结点的完全二叉树高度为$\left \lfloor log_2n \right \rfloor$</p><p>证明：</p><script type="math/tex;mode=display">设高度为k</script></li></ol><script type="math/tex;mode=display">二叉树结点个数介于高度为k-1和高度为k的满二叉树结点之间。\\</script><script type="math/tex;mode=display">2^k-1< n \leq 2^{k+1}-1\\</script><script type="math/tex;mode=display">所有log_2n-1<k\leq log_2n\\</script><script type="math/tex;mode=display">k取整数：k =\left \lfloor log_2n \right \rfloor</script><h2 id="3、二叉树递归遍历"><a href="#3、二叉树递归遍历" class="headerlink" title="3、二叉树递归遍历"></a>3、二叉树递归遍历</h2><ol><li><p>先根遍历(Preorder Traversal)</p><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Preorder</span><span class="hljs-params">(t)</span></span>IF t = NULL Then return.<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data(t)</span></span>).<span class="hljs-comment">// 直接打印出根，然后往左找</span><span class="hljs-function"><span class="hljs-title">Preorder</span><span class="hljs-params">(left(t)</span></span>)<span class="hljs-function"><span class="hljs-title">Preorder</span><span class="hljs-params">(right(t)</span></span>)</code></pre></li><li><p>中根遍历(Inorder Traversal)</p><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Inorder</span><span class="hljs-params">( t )</span></span>IF t = NULL Then return.<span class="hljs-function"><span class="hljs-title">INorder</span><span class="hljs-params">(left(t)</span></span>)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data(t)</span></span>)<span class="hljs-function"><span class="hljs-title">INorder</span><span class="hljs-params">(right(t)</span></span>)</code></pre></li><li><p>后根遍历(Postorder Traversal)</p><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Postorder</span><span class="hljs-params">( t )</span></span>IF t = NULL Then return.<span class="hljs-function"><span class="hljs-title">Postorder</span><span class="hljs-params">(left(t)</span></span>)<span class="hljs-function"><span class="hljs-title">Postorder</span><span class="hljs-params">(right(t)</span></span>)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data(t)</span></span>)</code></pre></li></ol><h2 id="4、二叉树非递归遍历"><a href="#4、二叉树非递归遍历" class="headerlink" title="4、二叉树非递归遍历"></a>4、二叉树非递归遍历</h2><h3 id="1、先根遍历"><a href="#1、先根遍历" class="headerlink" title="1、先根遍历"></a>1、先根遍历</h3><p>策略：</p><ol><li>一直往左走，只要不为空就访问，访问完进栈。当为空时弹栈，访问右子树。</li><li>进栈的是访问结点的右子树。</li></ol><pre><code class="hljs c">create(S);p = root(t)<span class="hljs-comment">// 创建一个辅助栈,辅助指针p指向根t。</span><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 一直循环，直到栈为空</span>{<span class="hljs-keyword">while</span>(p)<span class="hljs-comment">// 当p不为空，访问它，把它压栈或者它右子树压栈</span>{<span class="hljs-built_in">process</span>(p.data);S.push(p) <span class="hljs-keyword">or</span> S.push(p.right);p = p.left;}<span class="hljs-keyword">if</span>(S.empty()) <span class="hljs-keyword">return</span>;<span class="hljs-comment">// 循环出口。</span>p = S.pop();<span class="hljs-comment">// 出栈</span>p = p.right;<span class="hljs-comment">// 如果是压的右子树，这一步省略</span>}</code></pre><h3 id="2、中根遍历"><a href="#2、中根遍历" class="headerlink" title="2、中根遍历"></a>2、中根遍历</h3><p>策略：一直往走，中途结点全部压入栈。直到左子树为空，出栈访问，把右子树压栈。然后继续。</p><pre><code class="hljs c">creat(S);p=root(T);<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>){ <span class="hljs-keyword">while</span>(p)    {        S.push(p);        p = p.left;    }    <span class="hljs-keyword">if</span>(S.empty()) <span class="hljs-keyword">return</span>;    p = S.pop();    <span class="hljs-built_in">process</span>(p);<span class="hljs-comment">// 处理出栈的最左边结点</span>    p = p.right;<span class="hljs-comment">// 续上开头，现在p.right相当于root</span>}</code></pre><h3 id="3、二叉树的形态"><a href="#3、二叉树的形态" class="headerlink" title="3、二叉树的形态"></a>3、二叉树的形态</h3><p>中根和先根算法进出栈的顺序是一样的。<code>进栈序列</code>：<code>先根序列</code>;<code>出栈序列</code>:<code>中根序列</code></p><p>假设先根序列为1…n时，有多少种中跟序列就有多少种二叉树形态。(中根+先根唯一确定一棵树)</p><p>即n个数有多少种出栈方式:</p><script type="math/tex;mode=display">Catalan(n) = \frac{1}{n+1}C_{2n}^{n}</script><h3 id="4、后根遍历"><a href="#4、后根遍历" class="headerlink" title="4、后根遍历"></a>4、后根遍历</h3><p>策略：</p><ol><li><p>一直往左走，压栈。如果遇到右子树为空或者右子树已经遍历过了就出栈访问它。否者就访问右子树。开始新的遍历。</p><pre><code class="hljs gauss"><span class="hljs-keyword">Create</span>(S); p = <span class="hljs-built_in">root</span>(T);pre=<span class="hljs-built_in">NULL</span><span class="hljs-comment">//pre存储p之前访问过的结点。</span>  <span class="hljs-keyword">while</span>(true)  {      <span class="hljs-keyword">while</span>(p)      {          S.push(p);          p = p.left;      }      <span class="hljs-keyword">if</span>(S.empty) <span class="hljs-keyword">return</span>;      p = <span class="hljs-built_in">peak</span>(S);      <span class="hljs-keyword">if</span>(p.right == <span class="hljs-built_in">NULL</span> or p.right == pre)      {          S.pop();          <span class="hljs-built_in">process</span>(p.data);          pre = p;<span class="hljs-comment">//始终记录上一次访问过的结点</span>          p = <span class="hljs-built_in">NULL</span>;<span class="hljs-comment">//为了下一个循环中去父节点的右结点。</span>      }      <span class="hljs-keyword">else</span> p = p.right;  }</code></pre><p><img src="http://image.beenli.cn/img/20200410/3NxPuxxmqoTP.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p></li><li><p>允许多次进出栈。栈元素为二元组（结点，标号i)</p><p>i = 1 ：没有访问结点的任何子树。准备遍历其左子树</p><p>i = 2 ：遍历完左子树，准备遍历右子树</p><p>i = 3：遍历完右子树</p><p>初始化：（root(T), 1)压入栈。弹栈，判断出栈元素标号：</p><p>i = 1, 则将(p, 2) 压栈，准备遍历左子树。把（left(p), 1)压栈</p><p>i = 2, 则将(p, 3)压栈，准备遍历右子树，即把（right(p),1)压栈</p><p>i = 3, 访问结点p</p><pre><code class="hljs reasonml">create(S);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>push((root(T),<span class="hljs-number">1</span>));<span class="hljs-keyword">while</span>(!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>isempty<span class="hljs-literal">()</span>){(p,i) = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>pop<span class="hljs-literal">()</span>;    <span class="hljs-keyword">if</span>(p)<span class="hljs-comment">// 防止空指针</span>    {        <span class="hljs-keyword">if</span>(i<span class="hljs-operator"> == </span><span class="hljs-number">1</span>)        {            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>push((p,<span class="hljs-number">2</span>));            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>push((p.left, <span class="hljs-number">1</span>));        }        <span class="hljs-keyword">if</span>(i<span class="hljs-operator"> == </span><span class="hljs-number">2</span>)        {            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>push((p,<span class="hljs-number">3</span>));            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>push((p.right,<span class="hljs-number">1</span>));        }        <span class="hljs-keyword">else</span>        {            process(p.data)        }    }}</code></pre></li></ol><h3 id="5、层次遍历"><a href="#5、层次遍历" class="headerlink" title="5、层次遍历"></a>5、层次遍历</h3><pre><code class="hljs c">create(Q);<span class="hljs-keyword">if</span>(root(T)) Q.enqueue(T);<span class="hljs-comment">//先将头结点入队</span><span class="hljs-keyword">while</span>(!Q.empty){    p = Q.dequeue();    <span class="hljs-built_in">process</span>(p.data);<span class="hljs-comment">//取头结点访问</span>    <span class="hljs-keyword">if</span>(p.left) Q.enqueue(p.left); <span class="hljs-comment">//如果左节点不空，加入(先进先出)</span>    <span class="hljs-keyword">if</span>(p.right) Q.enqueue(p.right);}</code></pre><blockquote><p>由中根遍历 + （层次/先根/后根）唯一确定一棵树</p></blockquote><h2 id="5、二叉树相关应用"><a href="#5、二叉树相关应用" class="headerlink" title="5、二叉树相关应用"></a>5、二叉树相关应用</h2><h3 id="1、搜索给定结点的父节点"><a href="#1、搜索给定结点的父节点" class="headerlink" title="1、搜索给定结点的父节点"></a>1、搜索给定结点的父节点</h3><pre><code class="hljs c">Father(t,p.q)<span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span> <span class="hljs-keyword">or</span> p==t) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<span class="hljs-keyword">if</span>(t.left ==p <span class="hljs-keyword">or</span> t.right == p) <span class="hljs-keyword">return</span> t;<span class="hljs-comment">// return Father(t.left, p) || Fathre(t.right, p)</span>q = Father(t.left,p);<span class="hljs-keyword">if</span>(q) <span class="hljs-keyword">return</span> q;<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> Father(t.right, p)</code></pre><h3 id="2、释放二叉树"><a href="#2、释放二叉树" class="headerlink" title="2、释放二叉树"></a>2、释放二叉树</h3><pre><code class="hljs lisp">Del(<span class="hljs-name">p</span>)if(<span class="hljs-name">p</span> == NULL) return<span class="hljs-comment">;</span>Del(<span class="hljs-name">p</span>.left)<span class="hljs-comment">;</span>Del(<span class="hljs-name">p</span>.right)<span class="hljs-comment">;</span>free(<span class="hljs-name">p</span>)<span class="hljs-comment">;// 后续遍历删除，从后往前删。</span></code></pre><h3 id="3、删除一颗小树"><a href="#3、删除一颗小树" class="headerlink" title="3、删除一颗小树"></a>3、删除一颗小树</h3><blockquote><p>删除给定结点以及其左右子树<br></p><pre><code class="hljs c">DILR(t,p)<span class="hljs-keyword">if</span>(!p) <span class="hljs-keyword">return</span>;<span class="hljs-comment">// 为空</span><span class="hljs-keyword">if</span>(p == t){Del(p);    t = <span class="hljs-literal">NULL</span><span class="hljs-comment">//删除整棵树 t还有定义，可以再赋值。</span>}q = Father(t,p);<span class="hljs-keyword">if</span>(q.left == p) q.left = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//修改原来指向p的指针为空</span><span class="hljs-keyword">if</span>(q.right == p) q.right == <span class="hljs-literal">NULL</span>;Del(p);</code></pre><p></p></blockquote><h3 id="4、创建二叉树"><a href="#4、创建二叉树" class="headerlink" title="4、创建二叉树"></a>4、创建二叉树</h3><p>由于先根序列不能体现左右子树为空的情况，所有用<code>#</code>表示空子结点。则可以唯一表示一课树。</p><p><img src="http://image.beenli.cn/img/20200410/XEtAcvEkUge8.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><pre><code class="hljs c">递归算法（CreateBinTree)(简称为CBT)输入：包含空指针的先根序列输出：根指针t算法CBT(.t)p = getchar();<span class="hljs-keyword">if</span>(p == <span class="hljs-string">"\n"</span> || p == <span class="hljs-string">"#"</span>) {    t = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">// 指针置为空。即#代表空指针</span> <span class="hljs-keyword">return</span> t;<span class="hljs-comment">// 递归出口</span>}t = create(p);t-&gt;left = CBT(.t);t-&gt;right = CBT(.t);<span class="hljs-comment">// 建立左右子树</span><span class="hljs-keyword">return</span> t;<span class="hljs-function">Treeptr <span class="hljs-title">createbigtree</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"></span>{<span class="hljs-keyword">char</span> p;Treeptr t;p = getchar();<span class="hljs-keyword">if</span>(p == <span class="hljs-string">'\n'</span> || p == <span class="hljs-string">'#'</span>) {    t = <span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">return</span> t;}t = createtree(p);t-&gt;left = createbigtree();t-&gt;right = createbigtree();<span class="hljs-keyword">return</span> t;}</code></pre><h3 id="5、复制一颗二叉树"><a href="#5、复制一颗二叉树" class="headerlink" title="5、复制一颗二叉树"></a>5、复制一颗二叉树</h3><pre><code class="hljs xl">Treeptr copybigtree(Treeptr sample){    <span class="hljs-keyword">if</span>(sample) return NULL;<span class="hljs-comment">// 递归出口</span>    T<span class="hljs-function"><span class="hljs-title">reeptr</span> t = createtree(sample-&gt;</span><span class="hljs-keyword">data</span>);<span class="hljs-comment">// 复制根</span>    <span class="hljs-function"><span class="hljs-title">t</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">left</span> = copybigtree(sample-&gt;</span>left);<span class="hljs-comment">// 复制左子树</span>    <span class="hljs-function"><span class="hljs-title">t</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">right</span> = copybigtree(sample-&gt;</span>right);      <span class="hljs-comment">// 复制右子树</span>    return t;}</code></pre><h3 id="6、后序遍历求结点个数"><a href="#6、后序遍历求结点个数" class="headerlink" title="6、后序遍历求结点个数"></a>6、后序遍历求结点个数</h3><pre><code class="hljs c">算法 Count(t.n)<span class="hljs-keyword">if</span> t=^  then (n &lt;-- <span class="hljs-number">0.</span><span class="hljs-keyword">return</span>.)Count(left(t).nl).COunt(right(t).nr).n &lt;-- nl+nr+<span class="hljs-number">1.</span>|        <span class="hljs-comment">/* 利用后续遍历计算二叉树结点数 */</span><span class="hljs-keyword">int</span> Countnode(Treeptr p){    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">return</span> Countnode(p-&gt;left) + Countnode(p-&gt;right) + <span class="hljs-number">1</span>;}</code></pre><h3 id="7、计算二叉树的高度"><a href="#7、计算二叉树的高度" class="headerlink" title="7、计算二叉树的高度"></a>7、计算二叉树的高度</h3><pre><code class="hljs c">算法 depth(t.h)<span class="hljs-keyword">if</span> t=^ then(d &lt;-- <span class="hljs-number">-1.</span> <span class="hljs-keyword">return</span>.)<span class="hljs-keyword">else</span>(depth(left(t).d1).depth(right(t).d2).<span class="hljs-keyword">if</span>(d1&gt;d2) then d &lt;-- d1+<span class="hljs-number">1.</span><span class="hljs-keyword">else</span> d &lt;-- d2+<span class="hljs-number">1.</span>)|<span class="hljs-keyword">int</span> depthtree(Treeptr p){    <span class="hljs-keyword">if</span>(!p) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    <span class="hljs-keyword">int</span> ld = depthtree(p-&gt;left);    <span class="hljs-keyword">int</span> rd = depthtree(p-&gt;right);    <span class="hljs-keyword">return</span> ld&gt;rd ? ld+<span class="hljs-number">1</span>:rd +<span class="hljs-number">1</span>;}</code></pre><h3 id="8、二叉树首尾结点"><a href="#8、二叉树首尾结点" class="headerlink" title="8、二叉树首尾结点"></a>8、二叉树首尾结点</h3><blockquote><p>先, 中, 后（<code>不使用递归，不适应栈</code>）<br><img src="http://image.beenli.cn/img/20200411/3HBrfI6nMVNC.jpg?imageslim" srcset="/img/loading.gif" alt="先根序列第一个结点"></p></blockquote><p><img src="http://image.beenli.cn/img/20200411/XypySE1MIhfi.jpg?imageslim" srcset="/img/loading.gif" alt="后根序列第一个结点"></p><pre><code class="hljs c"><span class="hljs-comment">/**************** 中根序列 ********************/</span>---------------------第一个结点(最左边的结点)<span class="hljs-keyword">if</span>(t==<span class="hljs-literal">NULL</span>) then <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;p = t;<span class="hljs-keyword">while</span>(p-&gt;left) p = p-&gt;left;<span class="hljs-keyword">return</span> p;----------------------最后一个结点（最右边的结点）<span class="hljs-keyword">if</span>(t==<span class="hljs-literal">NULL</span>) then <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;p = t;<span class="hljs-keyword">while</span>(p-&gt;right) p = p-&gt;right;<span class="hljs-keyword">return</span> p;    <span class="hljs-comment">/***************** 先根序列 **********************/</span>-----------------------第一个结点（即根）<span class="hljs-keyword">return</span> t;-----------------------最后一个结点(往右找第一个叶结点，找不到往左再重复上一步操作)<span class="hljs-keyword">if</span>(t==<span class="hljs-literal">NULL</span>) then <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;p = t;<span class="hljs-keyword">while</span>(p){    <span class="hljs-keyword">if</span>(p-&gt;right) p = p-&gt;right;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p-&gt;left) p = p-&gt;left;<span class="hljs-comment">//不能往右就往左一步</span>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> p<span class="hljs-comment">// 无路可走就是他了</span>}<span class="hljs-comment">/******************* 后根序列 ***********************/</span>-------------------------第一个结点(往左找第一个叶结点，找不到往左一步再重复上一步)<span class="hljs-keyword">if</span>(t==<span class="hljs-literal">NULL</span>) then <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;p = t;<span class="hljs-keyword">while</span>(p){    <span class="hljs-keyword">if</span>(p-&gt;left) p = p-&gt;left;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p-&gt;right) p = p-&gt;right;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> p;}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、树的相关术语&quot;&gt;&lt;a href=&quot;#1、树的相关术语&quot; class=&quot;headerlink&quot; title=&quot;1、树的相关术语&quot;&gt;&lt;/a&gt;1、树的相关术语&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;度&lt;/strong&gt;：一个结点的子结点数目。树的度指度数最大
      
    
    </summary>
    
    
      <category term="CS" scheme="https://www.beenli.cn/categories/CS/"/>
    
      <category term="Data Structure" scheme="https://www.beenli.cn/categories/CS/Data-Structure/"/>
    
    
      <category term="C" scheme="https://www.beenli.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Tasks and Functions</title>
    <link href="https://www.beenli.cn/posts/71407778/"/>
    <id>https://www.beenli.cn/posts/71407778/</id>
    <published>2020-04-08T14:20:43.000Z</published>
    <updated>2020-09-30T12:00:56.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tasks-and-Functions"><a href="#Tasks-and-Functions" class="headerlink" title="Tasks and Functions"></a><center>Tasks and Functions</center></h1><h2 id="1、What-are-they-good-for"><a href="#1、What-are-they-good-for" class="headerlink" title="1、What are they good for"></a>1、What are they good for</h2><blockquote><p>Tasks and functions provide the ability to execute common procedures from several different places in a description. They also provide a means of breaking up large procedures into smaller ones to make it easier to read and debug the source descriptions.</p></blockquote><p>从std 1364-2005的这段描述中，我们可以总结出以下用处:</p><ol><li>减少重复工作，代码复用。</li><li>把大的过程拆解成几个小的任务和函数，更加易读和找bug</li></ol><h2 id="2、Distinctions-between-tasks-and-functions"><a href="#2、Distinctions-between-tasks-and-functions" class="headerlink" title="2、Distinctions between tasks and functions"></a>2、Distinctions between tasks and functions</h2><ol><li><p>A function shall execute in one simulation time unit; a task can contain time-controlling statements.</p><p>函数应该瞬间返回结果，不能有延时；而任务可以带有延时控制语句。</p></li><li><p>A function cannot enable a task; a task can enable other tasks and functions.</p><p>函数不能调用任务；但是任务可以调用其他任务或者函数。</p></li><li><p>A function shall have at least one input type argument and shall not have an output or inout type argument; a task can have zero or more arguments of any type.</p><p>函数应该至少有一个<code>输入参数</code>并且不能有输出或者输入输出参数。</p><p>任务可以有零个或者任意个任何种类的参数。</p></li><li><p>A function shall return a single value; a task shall not return a value.</p><p>函数应该返回一个单一的值；任务不能返回值(只能通过把处理放在参数上带回)</p><hr><p class="note note-primary">The purpose of a function is to respond to an input value by returning a single value. A task can support multiple goals and can calculate multiple result values. However, only the output or inout type arguments pass result values back from the invocation of a task. A function is used as an operand in an expression; the value of that operand is the value returned by the function.</p><ul><li><p>函数的目的：对于输入给出一个返回结果</p></li><li><p>任务支持多个结果，但是只有<code>输出</code>或者<code>输入输出</code>参数能够传递这种结果</p></li><li><p>函数可以在表达式中用作一个操作数。（其值就是函数返回的结果。是不是很像C)</p></li></ul></li><li><p>例如：</p><pre><code class="hljs verilog">switch_bytes(old_word, new_word);<span class="hljs-comment">//task会把运算结果放在new_word上</span>new_word = switch_bytes(old_word);<span class="hljs-comment">//function会直接把结果返回。</span></code></pre></li></ol><div class="table-container"><table><thead><tr><th>比较点</th><th>tasks</th><th>functions</th></tr></thead><tbody><tr><td><strong><em>输入输出</em></strong></td><td>任意多输入输出(input,output,inout)</td><td>至少一个输入不能有输出</td></tr><tr><td>触发事件控制</td><td>可以包含延时控制语句(#), 只能面向仿真，不能综合</td><td>不能出现always, # 等语句，函数应该在一个时间单元内返回值</td></tr><tr><td><strong><em>返回值</em></strong></td><td>通过输出端口传递</td><td>通过函数名返回(only one)</td></tr><tr><td><strong><em>中段</em></strong></td><td>可以由disable中断</td><td>不能</td></tr><tr><td>语句</td><td></td><td></td></tr><tr><td><strong><em>调用其他</em></strong></td><td>可以调用task和function</td><td>只能调用function，不能调用task</td></tr><tr><td><strong><em>其他说明</em></strong></td><td>task调用可以作为完整的语句出现</td><td>function调用只能作为赋值语句右边的operand</td></tr></tbody></table></div><h2 id="3、-Tasks-and-task-enabling"><a href="#3、-Tasks-and-task-enabling" class="headerlink" title="3、 Tasks and task enabling"></a>3、 Tasks and task enabling</h2><blockquote><p>A task shall be enabled from a statement that defines the argument values to be passed to the task and the variables that receive the results. Control shall be passed back to the enabling process after the task has completed. Thus, if a task has timing controls inside it, then the time of enabling a task can be different from the time at which the control is returned. A task can enable other tasks, which in turn can enable still other tasks—with no limit on the number of tasks enabled. Regardless of how many tasks have been enabled,control shall not return until all enabled tasks have completed.</p></blockquote><ol><li>调用task应该给出<code>传进参数的值</code>，和<code>接受结果的变量</code>。</li><li>task如果有延时控制，那么task被调用时刻和控制返回时刻可以不同。</li><li>task内可以再调用task，直到所有的task完成才会返回控制到顶层调用处。</li></ol><h3 id="3-1、task-declaration-syntaxes"><a href="#3-1、task-declaration-syntaxes" class="headerlink" title="3.1、task declaration syntaxes"></a>3.1、task declaration syntaxes</h3><pre><code class="hljs verilog">task_declaration ::= (From A<span class="hljs-variable">.2</span><span class="hljs-variable">.7</span>)<span class="hljs-keyword">task</span> [ <span class="hljs-keyword">automatic</span> ] task_identifier ; { task_item_declaration } statement_or_null <span class="hljs-keyword">endtask</span> task_declaration ::= (From A<span class="hljs-variable">.2</span><span class="hljs-variable">.7</span>)<span class="hljs-keyword">task</span> [ <span class="hljs-keyword">automatic</span> ] task_identifier ( [ task_port_list ] ) ;                 { block_item_declaration }                 statement_or_null                 <span class="hljs-keyword">endtask</span></code></pre><blockquote><p>Tasks without the optional keyword automatic are static tasks, with all declared items being statically allocated. These items shall be shared across all uses of the task executing concurrently. All items declared inside automatic tasks are allocated dynamically for each invocation Automatic task items cannot be accessed by hierarchical references. Automatic tasks can be invoked through use of their hierarchical name.（automatic的坑后面再填)</p></blockquote><h3 id="3-2、Task-enabling-and-argument-passing"><a href="#3-2、Task-enabling-and-argument-passing" class="headerlink" title="3.2、Task enabling and argument passing"></a>3.2、Task enabling and argument passing</h3><pre><code class="hljs angelscript">task_enable ::= (From A<span class="hljs-number">.6</span><span class="hljs-number">.9</span>)hierarchical_task_identifier [ ( expression { , expression } ) ] ;</code></pre><ol><li>If the argument is declared as an output or an inout, then the expression shall be restricted to an expression that is valid on the left-hand side of a procedural assignment.(输出参数：能位于<code>过程赋值语句</code>左边的有效表达式。<code>不能是wire</code>)</li></ol><ul><li>reg, integer, real, realtime, and time variables</li><li>Memory references</li><li>Concatenations of reg, integer, and time variables</li><li>Concatenations of memory references</li><li>Bit-selects and part-selects of reg, integer, and time variables</li></ul><ol><li><p>All arguments to the task shall be passed by value rather than by reference</p><p>任务参数的是<code>值传递</code>不是引用(指针)</p></li><li><p>If an argument in the task is declared as an input, then the corresponding expression can be any expression.The order of evaluation of the expressions in the argument list is undefined.</p><p>如果参数被定义为input，那么调用语句与之相应位置的表达式没有限制，表达式求值过程是没有被定义的。（求值顺序没有先后）</p></li></ol><pre><code class="hljs verilog"><span class="hljs-keyword">task</span>  my_task;     <span class="hljs-keyword">input</span>  a, b;     <span class="hljs-keyword">inout</span>  c;     <span class="hljs-keyword">output</span>  d, e;     <span class="hljs-keyword">begin</span>    . . .   <span class="hljs-comment">// statements that perform the work of the task</span>    . . .    c = foo1;   <span class="hljs-comment">// the assignments that initialize result regs</span>    d = foo2;    e = foo3;    <span class="hljs-keyword">end</span><span class="hljs-keyword">endtask</span></code></pre><pre><code class="hljs verilog"><span class="hljs-keyword">task</span>  my_task ( <span class="hljs-keyword">input</span>  a, b,  <span class="hljs-keyword">inout</span>  c,  <span class="hljs-keyword">output</span>  d, e);     <span class="hljs-keyword">begin</span>    . . .   <span class="hljs-comment">// statements that perform the work of the task</span>    . . .    c = foo1;  <span class="hljs-comment">// the assignments that initialize result regs</span>    d = foo2;    e = foo3;    <span class="hljs-keyword">end</span><span class="hljs-keyword">endtask</span></code></pre><p>一种是参数列表在函数名后定义。一种是在task里面定义。</p><blockquote><p>my_task (v, w, x, y, z); //调用语句</p></blockquote><p>The task-enabling arguments ( v , w , x , y , and z ) correspond to the arguments ( a , b , c , d , and e ) defined by the task.</p><p>当函数调用时:</p><blockquote><p>a = v;<br>b = w;<br>c = x;</p></blockquote><p>When the task completes, the following assignments to return the computed values to the<br>calling process are performed:(当函数结束后，下面的赋值返回对应的结果)</p><blockquote><p>x = c;<br>y = d;<br>z = e;</p></blockquote><p class="note note-primary">task enable statement中参数位置要和task definition 对应。不管你是哪种方法定义task</p><h3 id="3-3、Task-memory-usage-and-concurrent-face-with-head-bandage-（可以跳过）"><a href="#3-3、Task-memory-usage-and-concurrent-face-with-head-bandage-（可以跳过）" class="headerlink" title="3.3、Task memory usage and concurrent :face_with_head_bandage:（可以跳过）"></a>3.3、Task memory usage and concurrent :face_with_head_bandage:（可以跳过）</h3><p>A task may be enabled more than once concurrently. All variables of an automatic task shall be replicated on each concurrent task invocation to store state specific to that invocation.All variables of a static task shall be static in that there shall be a single variable corresponding to each declared local variable in a module instance, regardless of the number of concurrent activations of the task. However, static tasks in different instances of a module shall have separate storage from each other.</p><hr><h2 id="4、Disabling-of-named-blocks-and-tasks"><a href="#4、Disabling-of-named-blocks-and-tasks" class="headerlink" title="4、Disabling of named blocks and tasks"></a>4、Disabling of named blocks and tasks</h2><p>The <code>disable statement</code> provides the ability to terminate the activity associated with concurrently active procedures, while maintaining the structured nature of Verilog HDL procedural descriptions.（disable 语句可以终止正在运行的过程）</p><ol><li><pre><code class="hljs verilog"><span class="hljs-keyword">begin</span>  : block_name    rega = regb;    <span class="hljs-keyword">disable</span>  block_name;    regc = rega; <span class="hljs-comment">// this assignment will never execute</span><span class="hljs-keyword">end</span></code></pre></li><li><pre><code class="hljs verilog"><span class="hljs-keyword">begin</span>  : block_name    ...    <span class="hljs-keyword">if</span>  (a == <span class="hljs-number">0</span>)    <span class="hljs-keyword">disable</span>  block_name;    ...<span class="hljs-keyword">end</span> <span class="hljs-comment">// end of named block</span><span class="hljs-comment">// continue with code following named block</span></code></pre></li><li><pre><code class="hljs verilog"><span class="hljs-keyword">task</span>  proc_a;    <span class="hljs-keyword">begin</span>    ...    ...    <span class="hljs-keyword">if</span>  (a == <span class="hljs-number">0</span>)        <span class="hljs-keyword">disable</span>  proc_a; <span class="hljs-comment">// return if true(控制权交回调用语句)</span>    ...    ...    <span class="hljs-keyword">end</span><span class="hljs-keyword">endtask</span></code></pre></li><li><pre><code class="hljs verilog"><span class="hljs-keyword">begin</span> : <span class="hljs-keyword">break</span>    <span class="hljs-keyword">for</span>  (i = <span class="hljs-number">0</span>; i &lt; n; i = i+<span class="hljs-number">1</span>)  <span class="hljs-keyword">begin</span>  : <span class="hljs-keyword">continue</span>        @ clk            <span class="hljs-keyword">if</span>  (a == <span class="hljs-number">0</span>) <span class="hljs-comment">// "continue" loop</span>                <span class="hljs-keyword">disable</span>  <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//(相当于c里面的break)</span>            statements            statements         @ clk            <span class="hljs-keyword">if</span>  (a == b) <span class="hljs-comment">// "break" from loop</span>                <span class="hljs-keyword">disable</span>  <span class="hljs-keyword">break</span>;<span class="hljs-comment">// (相当于c里面的break)</span>            statements            statements    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span></code></pre></li><li><pre><code class="hljs verilog"><span class="hljs-keyword">fork</span><span class="hljs-keyword">begin</span>  : event_expr        @ ev1;        <span class="hljs-keyword">repeat</span>  (<span class="hljs-number">3</span>)  @ trig;        # d action (areg, breg);<span class="hljs-comment">//(只有当ev1出现，trig出现3次才触发)</span><span class="hljs-keyword">end</span>    @ reset  <span class="hljs-keyword">disable</span>  event_expr;<span class="hljs-comment">//(同上面并行进行)</span><span class="hljs-keyword">join</span></code></pre></li><li><pre><code class="hljs verilog"><span class="hljs-keyword">always</span> <span class="hljs-keyword">begin</span> : monostable# <span class="hljs-number">250</span> q = <span class="hljs-number">0</span>;<span class="hljs-keyword">end</span><span class="hljs-keyword">always</span>   @ retrig  <span class="hljs-keyword">begin</span><span class="hljs-comment">//（只要retrig变化间隔小于250，那么q就一直为1)</span>    <span class="hljs-keyword">disable</span>  monostable;    q = <span class="hljs-number">1</span>;<span class="hljs-keyword">end</span></code></pre></li></ol><h2 id="5、Functions-and-function-calling"><a href="#5、Functions-and-function-calling" class="headerlink" title="5、Functions and function calling"></a>5、Functions and function calling</h2><h3 id="5-1、Function-declarations"><a href="#5-1、Function-declarations" class="headerlink" title="5.1、Function declarations"></a>5.1、Function declarations</h3><pre><code class="hljs verilog">function_declaration ::= (From A<span class="hljs-variable">.2</span><span class="hljs-variable">.6</span>)            <span class="hljs-keyword">function</span> [ <span class="hljs-keyword">automatic</span> ] [ function_range_or_type ]             function_identifier ;             function_item_declaration { function_item_declaration }             function_statement             <span class="hljs-keyword">endfunction</span>                         | <span class="hljs-keyword">function</span> [ <span class="hljs-keyword">automatic</span> ] [ function_range_or_type ]             function_identifier ( function_port_list ) ;             { block_item_declaration }             function_statement             <span class="hljs-keyword">endfunction</span></code></pre><pre><code class="hljs verilog"><span class="hljs-keyword">function</span>  [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] getbyte; <span class="hljs-comment">// (如果没有给[range]那么默认为scalar)</span>    <span class="hljs-keyword">input</span>  [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] address;     <span class="hljs-keyword">begin</span>    <span class="hljs-comment">// code to extract low-order byte from addressed word</span>    . . .    getbyte =  result <span class="hljs-number">_</span>expression;    <span class="hljs-keyword">end</span><span class="hljs-keyword">endfunction</span></code></pre><pre><code class="hljs verilog"><span class="hljs-keyword">function</span>  [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] getbyte ( <span class="hljs-keyword">input</span>  [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] address);     <span class="hljs-keyword">begin</span>    <span class="hljs-comment">// code to extract low-order byte from addressed word</span>    . . .    getbyte =  result <span class="hljs-number">_</span>expression;    <span class="hljs-keyword">end</span><span class="hljs-keyword">endfunction</span></code></pre><h3 id="5-2、Returning-a-value-from-a-function"><a href="#5-2、Returning-a-value-from-a-function" class="headerlink" title="5.2、Returning a value from a function"></a>5.2、Returning a value from a function</h3><p>The function definition shall implicitly declare a variable, internal to the function, with the same name as the function. This variable either defaults to a 1-bit reg or is the same type as the type specified in the function declaration. The function definition initializes the return value from the function by assigning the function result to the internal variable with the same name as the function.</p><p>函数定义就隐含了一个变量（即函数名）</p><p>函数通过给这个隐含变量赋值返回值。</p><h3 id="5-3、Calling-a-function"><a href="#5-3、Calling-a-function" class="headerlink" title="5.3、Calling a function"></a>5.3、Calling a function</h3><pre><code class="hljs verilog">function_call ::= (From A<span class="hljs-variable">.8</span><span class="hljs-variable">.2</span>)        hierarchical_function_identifier{ attribute_instance } ( expression { , expression } )</code></pre><pre><code class="hljs verilog">word = control ? {getbyte(msbyte), getbyte(lsbyte)}:<span class="hljs-number">0</span>;(把两次函数调用的结果拼接起来)</code></pre><h3 id="5-4、Function-rules"><a href="#5-4、Function-rules" class="headerlink" title="5.4、Function rules"></a>5.4、Function rules</h3><ol><li><p>A function shall not have any nonblocking assignments or procedural continuous assignments.</p><p>函数不能有<code>非阻塞赋值</code>或者<code>过程连续赋值</code>（在一个时间单位内完成）</p></li><li><p>A function shall not have any event triggers.</p><p>函数不能有任何<code>时间触发</code></p></li></ol><pre><code class="hljs verilog"><span class="hljs-keyword">module</span>  tryfact;<span class="hljs-comment">// define the function</span><span class="hljs-keyword">function</span> <span class="hljs-keyword">automatic</span>   <span class="hljs-keyword">integer</span>  factorial;<span class="hljs-keyword">input</span>  [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] operand;<span class="hljs-keyword">integer</span>  i;<span class="hljs-keyword">if</span>  (operand &gt;= <span class="hljs-number">2</span>) factorial = factorial (operand - <span class="hljs-number">1</span>) * operand;<span class="hljs-keyword">else</span>factorial = <span class="hljs-number">1</span>;<span class="hljs-keyword">endfunction</span><span class="hljs-comment">// test the function</span><span class="hljs-keyword">integer</span>  result;<span class="hljs-keyword">integer</span>  n;<span class="hljs-keyword">initial</span>   <span class="hljs-keyword">begin</span><span class="hljs-keyword">for</span>  (n = <span class="hljs-number">0</span>; n &lt;= <span class="hljs-number">7</span>; n = n+<span class="hljs-number">1</span>)  <span class="hljs-keyword">begin</span>result = factorial(n);<span class="hljs-built_in">$display</span> (<span class="hljs-string">"%0d factorial=%0d"</span>, n, result);</code></pre><h3 id="5-5、-Use-of-constant-functions-face-with-head-bandage-（可以跳过）"><a href="#5-5、-Use-of-constant-functions-face-with-head-bandage-（可以跳过）" class="headerlink" title="5.5、 Use of constant functions:face_with_head_bandage:（可以跳过）"></a>5.5、 Use of constant functions<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f915.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f915.png?v8">🤕</span>（可以跳过）</h3><p>Constant function calls are used to support the building of complex calculations of values at elaboration time</p><p>常量函数调用用于支持在精化阶段构建复杂的值计算</p><p><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f642.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f642.png?v8">🙂</span>o_o ….待填坑。</p><h2 id="Renference"><a href="#Renference" class="headerlink" title="Renference"></a>Renference</h2><p>[IEEE Std 1364™-2005下载🔗]：链接：<a href="https://pan.baidu.com/s/1ryz4IAuQzNPnGifUJ8oAGw" rel="external nofollow noreferrer">https://pan.baidu.com/s/1ryz4IAuQzNPnGifUJ8oAGw</a><br>提取码：2qvb</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tasks-and-Functions&quot;&gt;&lt;a href=&quot;#Tasks-and-Functions&quot; class=&quot;headerlink&quot; title=&quot;Tasks and Functions&quot;&gt;&lt;/a&gt;&lt;center&gt;Tasks and Functions&lt;/
      
    
    </summary>
    
    
      <category term="Digital IC" scheme="https://www.beenli.cn/categories/Digital-IC/"/>
    
      <category term="verilog" scheme="https://www.beenli.cn/categories/Digital-IC/verilog/"/>
    
    
      <category term="specification" scheme="https://www.beenli.cn/tags/specification/"/>
    
  </entry>
  
  <entry>
    <title>git hooks自动部署hexo</title>
    <link href="https://www.beenli.cn/posts/fb29ac9a/"/>
    <id>https://www.beenli.cn/posts/fb29ac9a/</id>
    <published>2020-04-08T01:17:29.000Z</published>
    <updated>2020-08-05T09:57:43.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-hooks-自动部署hexo"><a href="#git-hooks-自动部署hexo" class="headerlink" title="git hooks 自动部署hexo"></a><center>git hooks 自动部署hexo</center></h2><h2 id="1、原理大致如下"><a href="#1、原理大致如下" class="headerlink" title="1、原理大致如下"></a>1、原理大致如下</h2><p><img src="http://image.beenli.cn/img/20200408/OX4sMTrK26wD.png?imageslim" srcset="/img/loading.gif" alt="git hooks"></p><h2 id="2、实施过程"><a href="#2、实施过程" class="headerlink" title="2、实施过程"></a>2、实施过程</h2><ol><li><p>在服务器上搭建一个git服务器<a href="#link"><sup>1</sup></a></p><ol><li><p><code>adduser git</code>(创建一个用户)</p></li><li><p>可以给创建的用户设置密钥<code>passwd git</code></p></li><li><p>赋予git用户sudo权限</p><pre><code class="hljs bash">chmod 740 /etc/sudoers</code></pre></li></ol></li></ol><p>vim /etc/sudoer<br></p><pre><code class="hljs stata">      `给git用户添加命令权限如下`          保存后退出，修改回文件权限`chmod 440 /etc/sudoers`            ![<span class="hljs-keyword">mark</span>](http:<span class="hljs-comment">//image.beenli.cn/img/20200408/cSLiyuqjcxOU.jpg?imageslim)</span>2. 初始化git仓库   ```bash   <span class="hljs-keyword">su</span> git<span class="hljs-comment">//切换至git用户</span>   <span class="hljs-keyword">mkdir</span> blog.git<span class="hljs-comment">//创建仓库文件夹</span>   <span class="hljs-keyword">cd</span> blog.git<span class="hljs-comment">//进入文件夹</span>   git init --bare<span class="hljs-comment">//使用--bare参数初始化为裸仓库，这样创建的仓库不包含工作区</span></code></pre><p></p><ol><li><p>创建网站目录</p><pre><code class="hljs bash">sudo mkdir /var/www/blog//创建网站根目录sudo chown -R git.git /var/www/blog//把blog目录以及子目录属组改为git(这一步很重要，否者后续提交没有权限)</code></pre></li><li><p>配置密钥[详情见:ssh协议](<a href="https://www.beenli.cn/posts/782a8ece/">https://www.beenli.cn/posts/782a8ece/</a></p><pre><code class="hljs bash">mkdir .ssh//创建.ssh目录(默认你在git用户的~目录下)<span class="hljs-built_in">cd</span> .sshtouch authorized_keys//把你本地生成的公钥拷贝到此文件夹种</code></pre></li><li><p>配置<code>hooks</code>(git 用户下)<a href="#link"><sup>2</sup></a></p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/blog.git/hooks//切换到hooks目录touch post-receive //创建post-receive文件chmod +x post-receive //赋予其可执行权限</code></pre><blockquote><p>The <code>post-receive</code> hook runs after the entire process is completed and can be used to update other services or notify users. It takes the same stdin data as the <code>pre-receive</code> hook. Examples include emailing a list, notifying a continuous integration server, or updating a ticket-tracking system – you can even parse the commit messages to see if any tickets need to be opened, modified, or closed. This script can’t stop the push process, but the client doesn’t disconnect until it has completed, so be careful if you try to do anything that may take a long time.</p></blockquote><p>复制该段代码到刚刚创建的post-receive文件</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">echo</span> <span class="hljs-string">"post-receive hook is running..."</span>GIT_REPO=/home/git/blog.gitTMP_GIT_CLONE=/tmp/blogPUBLIC_WWW=/var/www/blogrm -rf <span class="hljs-variable">${TMP_GIT_CLONE}</span>git <span class="hljs-built_in">clone</span> <span class="hljs-variable">$GIT_REPO</span> <span class="hljs-variable">$TMP_GIT_CLONE</span>rm -rf <span class="hljs-variable">${PUBLIC_WWW}</span>/*cp -rf <span class="hljs-variable">${TMP_GIT_CLONE}</span>/* <span class="hljs-variable">${PUBLIC_WWW}</span></code></pre><p>在执行<code>cp</code>（复制)命令的时候，<code>.git</code> 作为隐藏目录不会被拷贝到 Web 根目录下，也就避免了将整个仓库历史暴露在 Web 服务中。</p></li><li><p>最后配置hexo的<code>_config.yml</code></p><pre><code class="hljs bash">deploy:    <span class="hljs-built_in">type</span>: git    repository: git@VPS IP:/~/blog.git  <span class="hljs-comment"># 默认22端口</span>    branch: master</code></pre></li></ol><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="link"></div><p>[1] <a href="https://tding.top/archives/12a4e7e6.html" rel="external nofollow noreferrer">Hexo 博客部署到 VPS</a></p><p>[2] <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks" rel="external nofollow noreferrer">git hooks</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git-hooks-自动部署hexo&quot;&gt;&lt;a href=&quot;#git-hooks-自动部署hexo&quot; class=&quot;headerlink&quot; title=&quot;git hooks 自动部署hexo&quot;&gt;&lt;/a&gt;&lt;center&gt;git hooks 自动部署hexo&lt;/cent
      
    
    </summary>
    
    
      <category term="Software" scheme="https://www.beenli.cn/categories/Software/"/>
    
      <category term="Git" scheme="https://www.beenli.cn/categories/Software/Git/"/>
    
    
      <category term="git" scheme="https://www.beenli.cn/tags/git/"/>
    
      <category term="Hexo" scheme="https://www.beenli.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>SSH</title>
    <link href="https://www.beenli.cn/posts/782a8ece/"/>
    <id>https://www.beenli.cn/posts/782a8ece/</id>
    <published>2020-04-07T16:25:51.000Z</published>
    <updated>2020-09-30T11:59:15.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSH-Protocol"><a href="#SSH-Protocol" class="headerlink" title="SSH Protocol"></a><center>SSH Protocol</center></h2><blockquote><p><strong>Secure Shell</strong> (<strong>SSH</strong>) is a <a href="https://en.wikipedia.org/wiki/Cryptography" rel="external nofollow noreferrer">cryptographic</a> <a href="https://en.wikipedia.org/wiki/Network_protocol" rel="external nofollow noreferrer">network protocol</a> for operating network services securely over an unsecured network.<a href="https://en.wikipedia.org/wiki/Secure_Shell#cite_note-rfc4251-1" rel="external nofollow noreferrer">[1]</a> Typical applications include remote <a href="https://en.wikipedia.org/wiki/Command-line_interface" rel="external nofollow noreferrer">command-line</a>, <a href="https://en.wikipedia.org/wiki/Login" rel="external nofollow noreferrer">login</a>, and remote command execution, but any <a href="https://en.wikipedia.org/wiki/Network_service" rel="external nofollow noreferrer">network service</a> can be secured with SSH.</p></blockquote><p>摘自维基百科。主要为远程登录建立安全的通道。</p><h3 id="1、简要的工作原理"><a href="#1、简要的工作原理" class="headerlink" title="1、简要的工作原理"></a>1、简要的工作原理</h3><p><code>ssh</code>有两种工作方式</p><ol><li><p>基于口令验证</p><p>只要知道帐号和口令，就可以登录到远程主机。所有传输的数据都会被加密，但缺点是：不能保证你正在连接的服务器就是你想连接的服务器。以下是登录验证流程：</p><p><img src="http://image.beenli.cn/img/20200408/sdKikYkDIiNa.jpg?imageslim" srcset="/img/loading.gif" alt="口令验证"></p></li><li><p>基于密钥验证</p><p><img src="http://image.beenli.cn/img/20200408/XLDkiwcJXaOS.jpg?imageslim" srcset="/img/loading.gif" alt="密钥验证"></p></li></ol><h3 id="2、操作过程-本地win10-服务器centos"><a href="#2、操作过程-本地win10-服务器centos" class="headerlink" title="2、操作过程(本地win10+服务器centos)"></a>2、操作过程(本地win10+服务器centos)</h3><ol><li><p>本地生成密钥对</p><pre><code class="hljs bash"><span class="hljs-string">"Git Bash Hear"</span>ssh-keygen -t rsa</code></pre><p><img src="http://image.beenli.cn/img/20200408/v40J7WztY0xm.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>可以设置密码，也可以为空（既然为了免密那就设置为空吧，不然没意义了）</p><p>文件路径可选。默认放在<code>~/.ssh/</code></p></li><li><p>上传公钥到服务器上<a href="#link"><sup>1</sup></a></p><p>有两种办法：</p><ol><li><p>自行把刚刚上传的公钥上传到服务器指定用户<code>.ssh/</code>目录下的<code>authorized_keys</code>下。（认证密钥可以有很多把，多个localhost可以各自上传自己的🔒到服务器上。也可以所有人公用一把锁。）</p></li><li><p><code>ssh-copy-id -i [./y.pub] username@vps ip(-i指定路径，默认是在.ssh下)</code></p><p>这一步也是要认证密码的。不然什么人都可以上锁就乱套。</p></li></ol></li><li><p>免密登录服务器</p><pre><code class="hljs bash">ssh -i[dir] username@vps ip(-i指定密钥所在，默认在.ssh/下)</code></pre><p class="note note-success">如果之前产生密钥对时设置了密码，这里还是要输入一遍哪个密码的。如果为空就可以直接免密进入了</p></li><li><p>脚本文件加速登录<a href="#link"><sup>2</sup></a></p><ol><li><p>随便选择个文件夹，写一个config文件</p></li><li><pre><code class="lang-bash">Host vps                              # 一个便于你区别这是哪台机器的名字    HostName 47.95.247.18                   User git                          # 登录主机的用户名称    Port 22                                          IdentityFile ~/.ssh/id_rsa        # 密钥所在的文件位置</code></pre></li><li><p><code>ssh -F [config file] vps</code>(指定配置文件位置)就可以直接登录你设置的那台主机</p></li></ol></li></ol><hr><h5 id="可能遇到的问题3"><a href="#可能遇到的问题3" class="headerlink" title="可能遇到的问题3"></a>可能遇到的问题<a href="#link"><sup>3</sup></a></h5><ol><li><p>Authentication refused: bad ownership or modes for directory /root/.ssh</p><blockquote><p>ls -l /root/.ssh</p><p>发现改目录的所有者不是root。只用改成root即可</p><p>chown -R root.root /root/.ssh</p></blockquote></li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="link"></div><p>[1] <a href="https://blog.csdn.net/jeikerxiao/article/details/84105529" rel="external nofollow noreferrer">SSH 三步解决免密登录</a></p><p>[2] <a href="https://blog.csdn.net/ky1in93/article/details/83093981" rel="external nofollow noreferrer">ssh配置config快速登录</a></p><p>[3] <a href="https://www.howtogeek.com/168156/fixing-authentication-refused-bad-ownership-or-modes-for-directory/" rel="external nofollow noreferrer">解决权限问题</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SSH-Protocol&quot;&gt;&lt;a href=&quot;#SSH-Protocol&quot; class=&quot;headerlink&quot; title=&quot;SSH Protocol&quot;&gt;&lt;/a&gt;&lt;center&gt;SSH Protocol&lt;/center&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="CS" scheme="https://www.beenli.cn/categories/CS/"/>
    
      <category term="Computer Network" scheme="https://www.beenli.cn/categories/CS/Computer-Network/"/>
    
    
      <category term="protocols" scheme="https://www.beenli.cn/tags/protocols/"/>
    
  </entry>
  
  <entry>
    <title>操作系统-熟悉实验环境(1)</title>
    <link href="https://www.beenli.cn/posts/9cf5ff72/"/>
    <id>https://www.beenli.cn/posts/9cf5ff72/</id>
    <published>2020-04-07T05:07:15.000Z</published>
    <updated>2020-09-30T12:09:20.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="熟悉实验环境"><a href="#熟悉实验环境" class="headerlink" title="熟悉实验环境"></a><center>熟悉实验环境</center></h2><h3 id="1、x86模拟器Bochs1"><a href="#1、x86模拟器Bochs1" class="headerlink" title="1、x86模拟器Bochs1"></a>1、x86模拟器<a href="http://bochs.sourceforge.net/" rel="external nofollow noreferrer">Bochs</a><a href="#link"><sup>1</sup></a></h3><p class="note note-info">Bochs is a highly portable open source IA-32 (x86) PC emulator written in C++, that runs on most popular platforms. It includes emulation of the Intel x86 CPU, common I/O devices, and a custom BIOS. Bochs can be compiled to emulate many different x86 CPUs, from early 386 to the most recent x86-64 Intel and AMD processors which may even not reached the market yet.</p><p>可以看到<code>Boch</code>可以模拟<code>intel x86 CPU</code></p><p>在它模拟出的环境中可以运行 Linux、DOS 和各种版本的 Windows 等多种操作系统</p><h3 id="2、操作系统Ubuntu"><a href="#2、操作系统Ubuntu" class="headerlink" title="2、操作系统Ubuntu"></a>2、操作系统<a href="https://ubuntu.com/" rel="external nofollow noreferrer">Ubuntu</a></h3><p>因为有些实验内容涉及到在自己改进的 <code>Linux 0.11</code>下，运行自己编的应用程序。被改进的功能都是高 版本 Linux 内核已经具有的，在其上确认自己编写的应用程序无误后，再用之测试自己改进的 Linux 0.11，可以更有信心些。</p><h3 id="3、实验压缩包hit-oslab"><a href="#3、实验压缩包hit-oslab" class="headerlink" title="3、实验压缩包hit-oslab"></a>3、实验压缩包<a href="https://github.com/hoverwinter/HIT-OSLab" rel="external nofollow noreferrer">hit-oslab</a></h3><p>文件结构:</p><pre><code class="hljs bash">...└── bocks|   ├── BIOS-bochs-latest|       ├── bochs-dbg|   ├── bochs-gdb|   ├── bochsrc.bxrc|   ├── bochsrc-gdb.bxrc|       └── vgabios.bin|└── hdc|   └── umounted└── Linux-0.11|└── boot|├── kernel|├── fs|├── lib|├── init|├── mm|├── tools|├── include|├── tags|└── Makefile├── dbg-asm├── dbg-c├── gdb├── gdb-cmd.txt├── run├── rungdb└── mount-hdc</code></pre><ol><li><p>Image文件</p><p>我们在宿主操作系统也就是ubuntu上对Linux 0.11进行开发，修改和编译。</p><p>之后在Linux-0.11目录会生成一个<code>Image</code>的文件。（编译后的目标文件）</p><p><br></p><p>该文件包含引导和所以内核的二进制代码。</p><p class="note note-primary">oslab 采用 bochs 模拟器加载这个 Image 文件，模拟执行 Linux 0.11，这样省却了重新启动计算机的麻烦。</p></li><li><p>bochs目录</p><p>bochs目录是与bochs相关的执行文件、数据文件和配置文件</p></li><li><p>run 脚本</p><p><code>run</code> 是 运行bochs的脚本命令</p><p>运行后bochs会自动在他的</p><p>虚拟软驱——linux-0.11/Image</p><p>虚拟硬盘——hdc-0.11.img</p><p class="note note-primary">在 0.11 下访问文件系统，访问的就是 hdc-0.11.img 文件内虚拟的文件系统。<br>退出bochs之前现存盘，运行sync命令</p></li><li><p>hdc-0.11.img 文件</p><p>文件的格式是 Minix 文件系统的镜像。Linux 所有版本都支持这种格式的文件系统</p><p>所以可以在宿主系统上挂载该文件系统。达到宿主系统和Linux 0.11之间文件交换的效果</p><p>其中包含的文件有：</p><ul><li>Bash shell；</li><li>一些基本的 Linux 命令、工具，比如 cp、rm、mv、tar；</li><li>vi 编辑器；</li><li>gcc 1.4 编译器，可用来编译标准 C 程序；</li><li>as86 和 ld86；</li><li>Linux 0.11 的源代码，可在 0.11 下编译，然后覆盖现有的二进制内核。</li></ul></li><li><p>编译</p><blockquote><p>make all(make 命令会自动跳过未被修改的文件 )</p><p>如果重新编译没有效果可以试试删除中间文件: make clean &amp;&amp; make all</p></blockquote></li><li><p>运行</p><p><code>./run</code></p></li></ol><h3 id="4、调试"><a href="#4、调试" class="headerlink" title="4、调试"></a>4、调试</h3><ol><li><p>汇编级调试</p><p><code>./dbg-asm</code></p></li><li><p>C语言调试</p><ol><li><p><code>./dbg-c</code></p></li><li><p><code>./rungdb</code>(新开一个窗口)</p><blockquote><p>注意：启动的顺序不能交换，否则 gdb 无法连接。</p></blockquote></li></ol></li></ol><h3 id="5、文件交换"><a href="#5、文件交换" class="headerlink" title="5、文件交换"></a>5、文件交换</h3><pre><code class="hljs bash"><span class="hljs-comment"># 启动挂载脚本</span>$ <span class="hljs-built_in">cd</span> ~/oslab$ sudo ./mount-hdc<span class="hljs-comment"># 进入文件系统</span>$ <span class="hljs-built_in">cd</span> ./mount-hdc/<span class="hljs-comment"># 读写完毕，卸载文件系统</span>$ <span class="hljs-built_in">cd</span> ~/oslab$ sudo umount hdc</code></pre><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><div id="link"></div><p>[1] <a href="https://mooc.study.163.com/course/1000002004?tid=2402971010#/info" rel="external nofollow noreferrer">哈尔滨工业大学.操作系统</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;熟悉实验环境&quot;&gt;&lt;a href=&quot;#熟悉实验环境&quot; class=&quot;headerlink&quot; title=&quot;熟悉实验环境&quot;&gt;&lt;/a&gt;&lt;center&gt;熟悉实验环境&lt;/center&gt;&lt;/h2&gt;&lt;h3 id=&quot;1、x86模拟器Bochs1&quot;&gt;&lt;a href=&quot;#1、x86模
      
    
    </summary>
    
    
      <category term="CS" scheme="https://www.beenli.cn/categories/CS/"/>
    
      <category term="OS" scheme="https://www.beenli.cn/categories/CS/OS/"/>
    
    
      <category term="online course" scheme="https://www.beenli.cn/tags/online-course/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://www.beenli.cn/posts/d0edc1ed/"/>
    <id>https://www.beenli.cn/posts/d0edc1ed/</id>
    <published>2020-04-07T04:03:20.000Z</published>
    <updated>2020-09-30T12:06:54.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a><center>Linux常用命令</center></h2><ol><li><p>建立软链接<a href="https://man.linuxde.net/ln:link" rel="external nofollow noreferrer">ln</a></p><pre><code class="hljs bash">ln -s [源文件] [链接文件] (创建软链接)</code></pre><p>例如：在<code>~/oslab/</code>下有一个可执行文件<code>gdb</code><br>你只能用<code>./gdb</code>去执行它。<br>但是你可以把它链接到<code>$PATH</code>下，这样你可以在任意路径都可以执行</p><pre><code class="hljs bash">ln -s ~/oslab/gdb /usr/<span class="hljs-built_in">local</span>/bin/gdb</code></pre><p class="note note-info">ln -snf ~/oslab/xxx /usr/local/bin/gdb(修改)</p><hr></li><li><p>移动文件<a href="https://man.linuxde.net/mv" rel="external nofollow noreferrer">mv</a></p><pre><code class="hljs bash">mv [<span class="hljs-built_in">source</span>] [target]</code></pre><p>例如：</p><ol><li>​ <code>mv ~/oslab/oslab/* ~/oslab/</code> (把<code>~/oslab/oslab/</code>下的文件全部 复制到<code>~/oslab/</code>)</li><li><code>mv a.txt b.tax</code> 把文件名a.txt改为b.txt</li></ol><hr></li><li><p>设置权限<a href="https://man.linuxde.net/chmod" rel="external nofollow noreferrer">chmod</a>；<a href="https://man.linuxde.net/chown" rel="external nofollow noreferrer">chown</a></p><p><code>r</code> 读取权限，数字代号为<code>4</code>;<br><code>w</code> 写入权限，数字代号为<code>2</code>；<br><code>x</code> 执行或切换权限，数字代号为<code>1</code>；<br><code>-</code> 不具任何权限，数字代号为<code>0</code>；</p></li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">7</th><th style="text-align:center">rwx</th></tr></thead><tbody><tr><td style="text-align:center"><strong>6</strong></td><td style="text-align:center"><strong>rw-</strong></td></tr><tr><td style="text-align:center"><strong>5</strong></td><td style="text-align:center"><strong>r-x</strong></td></tr><tr><td style="text-align:center"><strong>4</strong></td><td style="text-align:center"><strong>r—</strong></td></tr><tr><td style="text-align:center"><strong>3</strong></td><td style="text-align:center"><strong>-wx</strong></td></tr><tr><td style="text-align:center"><strong>2</strong></td><td style="text-align:center"><strong>-w-</strong></td></tr><tr><td style="text-align:center"><strong>1</strong></td><td style="text-align:center"><strong>—x</strong></td></tr><tr><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>—-</strong></td></tr></tbody></table></div><pre><code class="hljs bash">chmod u+x,g+w f0　　 //为文件f0设置自己可以执行，组员可以写入的权限chmod u=rwx,g=rw,o=r f0   //为文件f0设置自己可以读写执行，同组可以读写。其他人可以读chmod 764 f0  // 效果同上chmod a+x f0  // 所有人都可以执行chown -R liu /usr/meng  //将目录/usr/meng及其下面的所有文件、子目录的文件属主改成 liu：</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;&lt;center&gt;Linux常用命令&lt;/center&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;建立软链接&lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.beenli.cn/categories/Linux/"/>
    
    
      <category term="toolkits" scheme="https://www.beenli.cn/tags/toolkits/"/>
    
  </entry>
  
  <entry>
    <title>VIM Plug-in</title>
    <link href="https://www.beenli.cn/posts/b71407e8/"/>
    <id>https://www.beenli.cn/posts/b71407e8/</id>
    <published>2020-04-06T09:11:58.000Z</published>
    <updated>2020-09-30T12:05:04.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VIM-Plugs"><a href="#VIM-Plugs" class="headerlink" title="VIM-Plugs"></a><center>VIM-Plugs</center></h2><h5 id="1、vim-plug-插件管理器"><a href="#1、vim-plug-插件管理器" class="headerlink" title="1、vim-plug: 插件管理器"></a>1、<a href="https://github.com/junegunn/vim-plug" rel="external nofollow noreferrer">vim-plug</a>: 插件管理器</h5><pre><code class="hljs CQL">call plug#begin('D:/App/vim/vim81/vimfiles/plugs')//插件安装目录(可以随意定)" Shorthand notation for pluginPlug 'foo/bar'                   //插件下载地址，GitHub可以简写call plug#end()// 函数结束标志</code></pre><blockquote><p>command</p></blockquote><ol><li>:PlugInstall // 安装插件</li><li>:PlugClean // 清理invalid插件</li><li>:PlugUpgrade // 升级插件</li><li>:PlugDiff // 查看现有插件与下载地址处插件不同，即检测更新细节</li><li>:PlugStatus // 查看插件加载情况</li><li>:PlugSnapshot // 生成用于恢复当前插件快照的脚本</li></ol><blockquote><p>feature</p></blockquote><pre><code class="hljs typescript">Plug <span class="hljs-string">'zhuzhzh/verilog_emacsauto.vim'</span>, {<span class="hljs-string">'for'</span>: [<span class="hljs-string">'verilog'</span>, <span class="hljs-string">'systemverilog'</span>] }<span class="hljs-comment">// 当且仅当打开的文件为Verilog或者systemVerilog时加载此插件</span>Plug <span class="hljs-string">'scrooloose/nerdtree'</span>, { <span class="hljs-string">'on'</span>: <span class="hljs-string">'NERDTreeToggle'</span> }<span class="hljs-comment">//当且仅当触发toggle命令时加载此插件</span></code></pre><hr><h5 id="2、lightline-彩色状态栏"><a href="#2、lightline-彩色状态栏" class="headerlink" title="2、lightline:彩色状态栏"></a>2、<a href="https://github.com/itchyny/lightline.vim" rel="external nofollow noreferrer">lightline</a>:彩色状态栏</h5><p><img src="http://image.beenli.cn/img/20200406/5NePjt0zYxFR.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><hr><h5 id="3、vim-colors-solarized-比较舒服的配色方案"><a href="#3、vim-colors-solarized-比较舒服的配色方案" class="headerlink" title="3、vim-colors-solarized:比较舒服的配色方案"></a>3、<a href="https://github.com/altercation/vim-colors-solarized" rel="external nofollow noreferrer">vim-colors-solarized</a>:比较舒服的配色方案</h5><p><img src="http://image.beenli.cn/img/20200406/daLnl7t2NSCK.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>此插件含有两种色调：dark；light</p><blockquote><p>call togglebg#map(“<f1>“) // 可以设置快捷键自行切换</f1></p></blockquote><hr><h5 id="4、youcompleteme：自动补全"><a href="#4、youcompleteme：自动补全" class="headerlink" title="4、youcompleteme：自动补全"></a>4、<a href="https://github.com/ycm-core/YouCompleteMe" rel="external nofollow noreferrer">youcompleteme</a>：自动补全</h5><hr><h5 id="5、vim-snippets-SirVer-ultisnips-代码片填充"><a href="#5、vim-snippets-SirVer-ultisnips-代码片填充" class="headerlink" title="5、vim-snippets+SirVer/ultisnips : 代码片填充"></a>5、<a href="https://github.com/honza/vim-snippets" rel="external nofollow noreferrer">vim-snippets</a>+<a href="https://github.com/SirVer/ultisnips" rel="external nofollow noreferrer">SirVer/ultisnips</a> : 代码片填充</h5><p>第一个插件提供好多语言的代码片文件。第二插件提供的填充引擎。</p><p>snippet有两种格式：</p><ul><li><code>snippets/*</code>: snippets using snipMate format</li><li><code>UltiSnips/*</code>: snippets using UltiSnips format</li></ul><p><img src="http://image.beenli.cn/img/20200406/lWeLOp6hU7Na.gif" srcset="/img/loading.gif" alt="mark"></p><pre><code class="hljs livescript">可以自己编写snippets文件{n}代表要填写的空白处。<span class="hljs-comment">/* placeholder*/</span>snippet test<span class="hljs-regexp">// Author: Wan Li</span><span class="hljs-regexp">//</span> time: `strftime(<span class="hljs-string">"%Y-%m-%d"</span>)`<span class="hljs-regexp">// function: ${1:/*写下测试的功能*/}</span><span class="hljs-regexp">//</span> ---------------------------------------------------<span class="hljs-string">\`timescale</span> <span class="hljs-number">1ns</span>/<span class="hljs-number">1ns</span><span class="hljs-string">\`include</span> <span class="hljs-string">"${2:/*包含的模块文件*/}"</span>    配置_vimrc文件<span class="hljs-keyword">let</span> g:UltiSnipsExpandTrigger=<span class="hljs-string">"&lt;c-j&gt;"</span><span class="hljs-regexp">//ctrl + j 触发</span><span class="hljs-regexp">let g:UltiSnipsJumpForwardTrigger="&lt;c-b&gt;"//</span>ctrl + b 跳到下一个需要填写的空处<span class="hljs-keyword">let</span> g:UltiSnipsJumpBackwardTrigger=<span class="hljs-string">"&lt;c-z&gt;"</span><span class="hljs-regexp">//ctrl + z 跳到上一个需要填写的空出</span></code></pre><hr><h5 id="6、nerdtree-可视化目录树"><a href="#6、nerdtree-可视化目录树" class="headerlink" title="6、nerdtree: 可视化目录树"></a>6、<a href="https://github.com/preservim/nerdtree" rel="external nofollow noreferrer">nerdtree</a>: 可视化目录树</h5><p><img src="http://image.beenli.cn/img/20200406/GAYHOnmiPSIj.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><p><img src="http://image.beenli.cn/img/20200406/zU1CDLe23EOh.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><p><img src="http://image.beenli.cn/img/20200406/36WBczsR3bS2.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><hr><h5 id="7、tabbar-整齐的标签窗口"><a href="#7、tabbar-整齐的标签窗口" class="headerlink" title="7、tabbar: 整齐的标签窗口"></a>7、<a href="https://github.com/majutsushi/tagbar" rel="external nofollow noreferrer">tabbar</a>: 整齐的标签窗口</h5><p><img src="http://image.beenli.cn/img/20200406/9PX5LoRQveLS.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><hr><h5 id="8、tpope-vim-commentary-快速注释"><a href="#8、tpope-vim-commentary-快速注释" class="headerlink" title="8、tpope/vim-commentary: 快速注释"></a>8、<a href="https://github.com/tpope/vim-commentary" rel="external nofollow noreferrer">tpope/vim-commentary</a>: 快速注释</h5><blockquote><p>gcc ：注释/取消注释一行</p><p>gc{motion}</p><p>gc : 注释selection块</p><p>7，17 Commentary</p></blockquote><hr><h5 id="9、vim-gutentags：借助universal-ctags-自动产生标签文件-taco"><a href="#9、vim-gutentags：借助universal-ctags-自动产生标签文件-taco" class="headerlink" title="9、vim-gutentags：借助universal ctags 自动产生标签文件:taco:"></a>9、<a href="https://github.com/ludovicchabant/vim-gutentags" rel="external nofollow noreferrer">vim-gutentags</a>：借助<a href="https://docs.ctags.io/en/latest/" rel="external nofollow noreferrer">universal ctags</a> 自动产生标签文件<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f32e.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f32e.png?v8">🌮</span></h5><p>有了这个标签文件，你又可以<code>&lt;C+]&gt;</code>跳转</p><hr><h5 id="10、vim-easy-align：自动对齐"><a href="#10、vim-easy-align：自动对齐" class="headerlink" title="10、vim-easy-align：自动对齐"></a>10、<a href="https://github.com/junegunn/vim-easy-align" rel="external nofollow noreferrer"><strong>vim-easy-align</strong></a>：自动对齐</h5><p>按官方配置来设置快捷键/ga触发</p><blockquote><p>“ Start interactive EasyAlign in visual mode (e.g. vipga)<br>xmap ga<plug>(EasyAlign)</plug></p><p>“ Start interactive EasyAlign for a motion/text object (e.g. gaip)<br>nmap ga<plug>(EasyAlign)</plug></p></blockquote><ul><li><code>1</code> Around the 1st occurrences of delimiters</li><li><code>2</code> Around the 2nd occurrences of delimiters</li><li>…</li><li><code>*</code> Around all occurrences of delimiters</li><li><code>**</code> Left-right alternating alignment around all delimiters</li><li><code>-</code> Around the last occurrences of delimiters (<code>-1</code>)</li><li><code>-2</code> Around the second to last occurrences of delimiters</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">Key</th><th style="text-align:center">Description/Use cases</th></tr></thead><tbody><tr><td style="text-align:center">``</td><td style="text-align:center">General alignment around whitespaces</td></tr><tr><td style="text-align:center"><code>=</code></td><td style="text-align:center">Operators containing equals sign (<code>=</code>, <code>==,</code> <code>!=</code>, <code>+=</code>, <code>&amp;&amp;=</code>, …)</td></tr><tr><td style="text-align:center"><code>:</code></td><td style="text-align:center">Suitable for formatting JSON or YAML</td></tr><tr><td style="text-align:center"><code>.</code></td><td style="text-align:center">Multi-line method chaining</td></tr><tr><td style="text-align:center"><code>,</code></td><td style="text-align:center">Multi-line method arguments</td></tr><tr><td style="text-align:center"><code>&amp;</code></td><td style="text-align:center">LaTeX tables (matches <code>&amp;</code> and <code>\\</code>)</td></tr><tr><td style="text-align:center"><code>#</code></td><td style="text-align:center">Ruby/Python comments</td></tr><tr><td style="text-align:center"><code>"</code></td><td style="text-align:center">Vim comments</td></tr><tr><td style="text-align:center">``</td><td style="text-align:center">Table markdown</td></tr></tbody></table></div><p><img src="http://image.beenli.cn/img/20200406/fubial5cDLym.gif" srcset="/img/loading.gif" alt="mark"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;VIM-Plugs&quot;&gt;&lt;a href=&quot;#VIM-Plugs&quot; class=&quot;headerlink&quot; title=&quot;VIM-Plugs&quot;&gt;&lt;/a&gt;&lt;center&gt;VIM-Plugs&lt;/center&gt;&lt;/h2&gt;&lt;h5 id=&quot;1、vim-plug-插件管理器&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="Software" scheme="https://www.beenli.cn/categories/Software/"/>
    
      <category term="VIM" scheme="https://www.beenli.cn/categories/Software/VIM/"/>
    
    
      <category term="toolkits" scheme="https://www.beenli.cn/tags/toolkits/"/>
    
  </entry>
  
  <entry>
    <title>Gate-and-switch-level modeling</title>
    <link href="https://www.beenli.cn/posts/aff089ac/"/>
    <id>https://www.beenli.cn/posts/aff089ac/</id>
    <published>2020-04-05T01:54:38.000Z</published>
    <updated>2020-09-30T12:02:50.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gate-and-switch-level-modeling"><a href="#Gate-and-switch-level-modeling" class="headerlink" title="Gate-and-switch-level modeling"></a><center>Gate-and-switch-level modeling</center></h1><h2 id="1、verilog-std-1364-20051"><a href="#1、verilog-std-1364-20051" class="headerlink" title="1、verilog-std-1364-20051"></a>1、verilog-std-1364-2005<a href="#link"><sup>1</sup></a></h2><blockquote><p>There are <code>14 logic gates</code> and <code>12 switches</code> predefined in the Verilog HDL to provide the gate- and switch-level modeling facility. Modeling with logic gates and switches has the following advantages:</p></blockquote><p>— Gates provide a much closer one-to-one <code>mapping</code> between the actual circuit and the model.<br>— There is no <code>continuous assignment</code> equivalent to the <code>bidirectional transfer gate</code>.</p><p>Verilog1364-2005标准规定了26个基本原件，其中14个门级原件，12个开关级原件。</p><p>对于这些原件不需要定义直接调用。</p><h2 id="2、门级建模2"><a href="#2、门级建模2" class="headerlink" title="2、门级建模2"></a>2、门级建模<a href="#link"><sup>2</sup></a></h2><p><img src="http://image.beenli.cn/global/20200405/86dMFOGFTOna.png?imageslim" srcset="/img/loading.gif" alt="内置门级元件"></p><ol><li><p>多输入门：</p><pre><code class="hljs verilog">n_input_gate_instance ::= [ name_of_gate_instance ] ( output_terminal , input_terminal { , input_terminal } ) <span class="hljs-keyword">and</span> A1(out1, in1, in2);<span class="hljs-keyword">or</span>  O1(outa, inb, inc, ind);<span class="hljs-keyword">xor</span> X1(outx, inx, iny, inz, inw);</code></pre></li><li><p>多输出门调用:</p><pre><code class="hljs verilog">n_output_gate_instance ::= [ name_of_gate_instance ] ( output_terminal { , output_terminal } , input_terminal ) <span class="hljs-keyword">buf</span> BUF_1(bufout1, bufout2, bufout3, bufin);<span class="hljs-keyword">not</span> NOT_1(out1, out2, in);</code></pre></li><li><p>三态门调用:</p><pre><code class="hljs verilog">enable_gate_instance ::= [ name_of_gate_instance ] ( output_terminal , input_terminal , enable_terminal )<span class="hljs-keyword">bufif1</span> BF1(data_bus, data, enable);</code></pre></li><li><p>二个电阻</p><p>The instance declaration of a pullup or a pulldown source shall begin with one of the following keywords: <code>pullup</code> , <code>pulldown</code></p><pre><code class="hljs verilog">pull_gate_instance ::= [ name_of_gate_instance ] ( output_terminal )  <span class="hljs-keyword">pullup</span>   (<span class="hljs-keyword">strong1</span>)  p1 (neta), p2 (netb);In <span class="hljs-keyword">this</span> example, the  p1  <span class="hljs-keyword">instance</span> drives  neta  <span class="hljs-keyword">and</span> the  p2  <span class="hljs-keyword">instance</span> drives netb  <span class="hljs-keyword">with</span> <span class="hljs-keyword">strong</span> strength.</code></pre></li><li><p>注意: 门级原件的端口列表都固定好了，可以不用定义中间连接信号类型(wire)</p><hr></li></ol><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><pre><code class="hljs verilog"><span class="hljs-comment">// 门级建模实现最小项表达式</span><span class="hljs-comment">// F(a, b, c) = m1 + m2 + m3 + m6 + m7 = (!a)c + b</span><span class="hljs-keyword">module</span> zuixiaoxiang(out, a, b, c);    <span class="hljs-keyword">input</span> a, b, c;    <span class="hljs-keyword">output</span> out;    <span class="hljs-keyword">wire</span> s1, s2;    <span class="hljs-keyword">not</span> U1(s1, a);    <span class="hljs-keyword">and</span> U2(s2, s1, c);    <span class="hljs-keyword">or</span> U3(out, s2, b);<span class="hljs-keyword">endmodule</span></code></pre><p><img src="http://image.beenli.cn/global/20200405/ADk6SPgKBGVt.jpg?imageslim" srcset="/img/loading.gif" alt="门级"></p><h2 id="3、开关级建模"><a href="#3、开关级建模" class="headerlink" title="3、开关级建模"></a>3、开关级建模</h2><ol><li>MOS switches</li></ol><div class="table-container"><table><thead><tr><th><strong>cmos</strong></th><th><strong>pmos</strong></th><th><strong>nmos</strong></th></tr></thead><tbody><tr><td><strong>rcmos</strong></td><td><strong>rnmos</strong></td><td><strong>rpmos</strong></td></tr></tbody></table></div><blockquote><p>rmos : 代表晶体管导通时源漏有较高的阻抗(<code>impedance</code>)</p></blockquote><pre><code class="hljs verilog">The following example declares a <span class="hljs-keyword">pmos</span> switch:<span class="hljs-keyword">pmos</span>  p1 (out, data, control);The <span class="hljs-keyword">output</span> is  out , the data <span class="hljs-keyword">input</span> is  data , <span class="hljs-keyword">and</span> the control <span class="hljs-keyword">input</span> is control<span class="hljs-variable">.The</span> <span class="hljs-keyword">instance</span> name is  p1 .</code></pre><ol><li>Bidirectional pass switches(双向开关)</li></ol><div class="table-container"><table><thead><tr><th><strong>tran</strong></th><th><strong>tranif1</strong></th><th><strong>tranif0</strong></th></tr></thead><tbody><tr><td><strong>rtran</strong></td><td><strong>rtranif1</strong></td><td><strong>rtranif0</strong></td></tr></tbody></table></div><blockquote><p>The bidirectional pass switches shall not delay signals propagating through them. When tranif0, tranif1,rtranif0, or rtranif1 devices are turned off, they shall block signals; and when they are turned on, they shall pass signals. The tran and rtran devices cannot be turned off, and they shall always pass signals.(双向开关没有传播延时)</p></blockquote><pre><code class="hljs verilog">The following example declares an <span class="hljs-keyword">instance</span> of <span class="hljs-keyword">tranif1</span>:<span class="hljs-keyword">tranif1</span>  t1 (inout1,inout2,control);The bidirectional terminals are  inout1  <span class="hljs-keyword">and</span>  inout2 . The control <span class="hljs-keyword">input</span> is  control . The <span class="hljs-keyword">instance</span> name is t1 .</code></pre><hr><h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h3><pre><code class="hljs verilog"><span class="hljs-comment">// 2输入与门</span><span class="hljs-comment">// time:2020-04-05</span><span class="hljs-keyword">module</span> and2_1(out, a, b);    <span class="hljs-keyword">input</span> a,b;    <span class="hljs-keyword">output</span> out;    <span class="hljs-keyword">wire</span> s1, s2;    <span class="hljs-keyword">supply0</span> Gnd;    <span class="hljs-keyword">supply1</span> Vdd;    <span class="hljs-keyword">pmos</span> U1(s1, Vdd, a);    <span class="hljs-keyword">pmos</span> U2(s1, Vdd, b);    <span class="hljs-keyword">nmos</span> U3(s1, s2, a);    <span class="hljs-keyword">nmos</span> U4(s2, Gnd, b);    <span class="hljs-keyword">pmos</span> U5(out, Vdd, s1);    <span class="hljs-keyword">nmos</span> U6(out, Gnd, s1);<span class="hljs-keyword">endmodule</span></code></pre><p><img src="http://image.beenli.cn/img/20200405/UWkPoOqPACnO.jpg?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>quarter II 综合不了，没办法直接看viewer。只能把书上的图扒来了。</p><hr><h4 id="终于找到了一款RTL级，gate级，开关级debugger和viewer的软件"><a href="#终于找到了一款RTL级，gate级，开关级debugger和viewer的软件" class="headerlink" title="终于找到了一款RTL级，gate级，开关级debugger和viewer的软件"></a>终于找到了一款RTL级，gate级，开关级debugger和viewer的软件</h4><p><a href="http://www.concept.de/SpiceVision.html" rel="external nofollow noreferrer">trainsistor-level debugger and viewer</a></p><p>但是目前下载不了，得找客服联系。不知有人有用过这款软件没有。有的话请你一定告诉我。</p><h2 id="Renference"><a href="#Renference" class="headerlink" title="Renference"></a>Renference</h2><div id="link"></div><p>[1] <a href="https://standards.ieee.org/standard/1364-2005.html" rel="external nofollow noreferrer">verilog-std-1364-2005</a></p><p>[2] <a href="">蔡觉平.2015.Verilog HDL 数字集成电路高级程序设计 31P</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Gate-and-switch-level-modeling&quot;&gt;&lt;a href=&quot;#Gate-and-switch-level-modeling&quot; class=&quot;headerlink&quot; title=&quot;Gate-and-switch-level modeling&quot;&gt;
      
    
    </summary>
    
    
      <category term="Digital IC" scheme="https://www.beenli.cn/categories/Digital-IC/"/>
    
      <category term="verilog" scheme="https://www.beenli.cn/categories/Digital-IC/verilog/"/>
    
    
      <category term="specification" scheme="https://www.beenli.cn/tags/specification/"/>
    
  </entry>
  
</feed>
