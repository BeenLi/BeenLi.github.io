{"meta":{"title":"BeenLi's blog","subtitle":"趁还年轻, 多折腾几下","description":"平常爱打球, 听歌, 看书.<br>吉林大学17级微电子, 辅修CS","author":"Wan Li","url":"http://blog.beenli.com","root":"/"},"pages":[{"title":"about","date":"2020-03-31T11:43:04.000Z","updated":"2020-03-31T14:27:10.699Z","comments":true,"path":"about/index.html","permalink":"http://blog.beenli.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-03-30T15:37:02.000Z","updated":"2020-03-31T11:44:19.387Z","comments":false,"path":"categories/index.html","permalink":"http://blog.beenli.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-03-31T13:03:56.998Z","updated":"2020-03-31T03:35:18.941Z","comments":true,"path":"js/fold_action.js","permalink":"http://blog.beenli.com/js/fold_action.js","excerpt":"","text":"$(document).ready(function(){ $(document).on('click', '.fold_hider', function(){ $('>.fold', this.parentNode).slideToggle(); $('>:first', this).toggleClass('open'); }); //默认情况下折叠 $(\"div.fold\").css(\"display\",\"none\"); });"},{"title":"tags","date":"2020-03-30T15:39:32.000Z","updated":"2020-03-31T11:43:51.021Z","comments":false,"path":"tags/index.html","permalink":"http://blog.beenli.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"单链表翻转","slug":"单链表翻转","date":"2020-03-31T15:50:58.000Z","updated":"2020-03-31T15:29:03.034Z","comments":true,"path":"posts/39c22857.html","link":"","permalink":"http://blog.beenli.com/posts/39c22857.html","excerpt":"单链表翻转解法一、拆卸+拼接","text":"单链表翻转解法一、拆卸+拼接1234567891011121314struct ListNode *reverseList(struct ListNode* head)&#123; struct ListNOde *newHead = NUll; struct ListNode *node = NULL; while (head != NULL) &#123; //1. 对之前的链表做头删 node = head; // node始终指向head的前驱 head = head-&gt;next; //2. 对新链表做头插 node-&gt;next = newHead; newHead = node; &#125; return newHead;&#125; 解法二、三指针法123456789101112131415161718struct ListNode *reverseList(struct ListNode* head) &#123; if (head == NULL) &#123; // 如果为NULL，那么后指针越界。 return NULL; &#125; struct ListNode *p0 = NULL; struct ListNode *p1 = head; struct ListNode *p2 = head-&gt;next; while (p1 != NULL) &#123; p1-&gt;next = p0; p0 = p1; p1 = p2; if (p2 != NULL) &#123; p2 = p2-&gt;next; &#125; &#125; return p0;&#125; 参考博客","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://blog.beenli.com/categories/Data-Structure/"}],"tags":[{"name":"C","slug":"C","permalink":"http://blog.beenli.com/tags/C/"}]},{"title":"test","slug":"test","date":"2020-03-31T15:28:04.000Z","updated":"2020-03-31T15:28:14.160Z","comments":true,"path":"posts/d87f7e0c.html","link":"","permalink":"http://blog.beenli.com/posts/d87f7e0c.html","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Testbench","slug":"Verilog-Testbench","date":"2020-03-30T11:57:08.000Z","updated":"2020-03-31T15:30:18.813Z","comments":true,"path":"posts/bc753b52.html","link":"","permalink":"http://blog.beenli.com/posts/bc753b52.html","excerpt":"","text":"在hexo的第一篇博客","categories":[{"name":"Digital IC","slug":"Digital-IC","permalink":"http://blog.beenli.com/categories/Digital-IC/"}],"tags":[{"name":"verilog","slug":"verilog","permalink":"http://blog.beenli.com/tags/verilog/"}]}],"categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://blog.beenli.com/categories/Data-Structure/"},{"name":"Digital IC","slug":"Digital-IC","permalink":"http://blog.beenli.com/categories/Digital-IC/"}],"tags":[{"name":"C","slug":"C","permalink":"http://blog.beenli.com/tags/C/"},{"name":"verilog","slug":"verilog","permalink":"http://blog.beenli.com/tags/verilog/"}]}